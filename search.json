[{"path":"https://daroczig.github.io/logger/articles/customize_logger.html","id":"what-gets-logged","dir":"Articles","previous_headings":"","what":"What gets logged?","title":"Customizing the Format and the Destination of a Log Record","text":"logger mostly relies uses default log4j log levels supports suppressing log messages lower log level compared currently set threshold logging namespace: ?log_threshold function can get set log level threshold future log requests. full list supported log levels thus possible log level thresholds, see ?log_levels. want define log level programmatic way, check ?log_level, eg temporarily update log level threshold, may also find ?with_log_threshold function useful: can also define log level(s) needed, example introducing extra level DEBUG INFO:","code":"log_info('Hi, there!') #> INFO [2024-08-18 23:14:21] Hi, there! log_debug('How are you doing today?') log_threshold() #> Log level: INFO log_threshold(TRACE) log_debug('How are you doing today?') #> DEBUG [2024-08-18 23:14:21] How are you doing today? log_level(INFO, 'Hi, there!') #> INFO [2024-08-18 23:14:21] Hi, there! log_threshold(INFO) log_debug('pst, can you hear me?') log_info('no') #> INFO [2024-08-18 23:14:21] no  with_log_threshold(log_debug('pst, can you hear me?'), threshold = TRACE) #> DEBUG [2024-08-18 23:14:21] pst, can you hear me? log_info('yes') #> INFO [2024-08-18 23:14:21] yes  with_log_threshold({     log_debug('pst, can you hear me?')     log_info('yes') }, threshold = TRACE) #> DEBUG [2024-08-18 23:14:21] pst, can you hear me? #> INFO [2024-08-18 23:14:21] yes FYI <- structure(450L, level = 'FYI', class = c('loglevel', 'integer')) log_threshold(FYI) log_debug('ping') log_level(FYI, 'ping') #> FYI [2024-08-18 23:14:21] ping log_info('pong') #> INFO [2024-08-18 23:14:21] pong"},{"path":"https://daroczig.github.io/logger/articles/customize_logger.html","id":"log-namespaces","dir":"Articles","previous_headings":"","what":"Log namespaces","title":"Customizing the Format and the Destination of a Log Record","text":"default, log messages processed global logger definition, may also use custom namespaces (eg deliver specific log records special destination apply custom log level threshold) even multiple loggers well within namespace (eg deliver INFO log levels console everything trace log file). specify unknown namespace log request, fall back global settings: start customizing namespace, gets forked global settings live without modifying original namespace:","code":"log_threshold(INFO) log_trace('Hi, there!', namespace = 'kitchensink') log_info('Hi, there!', namespace = 'kitchensink') #> INFO [2024-08-18 23:14:21] Hi, there! log_threshold(TRACE, namespace = 'kitchensink') log_trace('Hi, there!', namespace = 'kitchensink') #> TRACE [2024-08-18 23:14:22] Hi, there! log_info('Hi, there!', namespace = 'kitchensink') #> INFO [2024-08-18 23:14:22] Hi, there! log_trace('Hi, there!')"},{"path":"https://daroczig.github.io/logger/articles/customize_logger.html","id":"log-message-formatter-functions","dir":"Articles","previous_headings":"","what":"Log message formatter functions","title":"Customizing the Format and the Destination of a Log Record","text":"example, logged strings without dynamic parameter, task logger quite easy. cases want log parameterized string formatter function’s task transform regular character vector. default, logger uses glue background: don’t like syntax, want save dependency, can use formatter functions well, ?formatter_sprintf (default eg logging futile.logger packages) ?formatter_paste, write formatter function converting R objects string.","code":"log_formatter(formatter_glue) log_info('There are {nrow(mtcars)} cars in the mtcars dataset') #> INFO [2024-08-18 23:14:22] There are 32 cars in the mtcars dataset log_info('2 + 2 = {2+2}') #> INFO [2024-08-18 23:14:22] 2 + 2 = 4"},{"path":"https://daroczig.github.io/logger/articles/customize_logger.html","id":"log-message-layouts","dir":"Articles","previous_headings":"","what":"Log message layouts","title":"Customizing the Format and the Destination of a Log Record","text":"default, ?log_level derivative functions (eg ?log_info) simply record log-level, current timestamp message processed glue: example, first, 42 converted string ?formatter_glue message formatter, message passed ?layout_simple layout function generate actual log record. example another layout function writing log messages JSON: need colorized logs highlighting important log messages, check ?layout_glue_colors, formatter layout functions, see manual mentioned functions references functions generator functions bundled package.","code":"log_info(42) #> INFO [2024-08-18 23:14:22] 42 log_info('The answer is {42}') #> INFO [2024-08-18 23:14:22] The answer is 42 log_info('The answers are {1:5}') #> INFO [2024-08-18 23:14:22] The answers are 1 #> INFO [2024-08-18 23:14:22] The answers are 2 #> INFO [2024-08-18 23:14:22] The answers are 3 #> INFO [2024-08-18 23:14:22] The answers are 4 #> INFO [2024-08-18 23:14:22] The answers are 5 log_layout(layout_json()) log_info(42) #> {\"time\":\"2024-08-18 23:14:22\",\"level\":\"INFO\",\"ns\":\"global\",\"ans\":\"global\",\"topenv\":\"R_GlobalEnv\",\"fn\":\"eval\",\"node\":\"fv-az1393-167\",\"arch\":\"x86_64\",\"os_name\":\"Linux\",\"os_release\":\"6.5.0-1025-azure\",\"os_version\":\"#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024\",\"pid\":8156,\"user\":\"runner\",\"msg\":\"42\"} log_info('The answer is {42}') #> {\"time\":\"2024-08-18 23:14:22\",\"level\":\"INFO\",\"ns\":\"global\",\"ans\":\"global\",\"topenv\":\"R_GlobalEnv\",\"fn\":\"eval\",\"node\":\"fv-az1393-167\",\"arch\":\"x86_64\",\"os_name\":\"Linux\",\"os_release\":\"6.5.0-1025-azure\",\"os_version\":\"#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024\",\"pid\":8156,\"user\":\"runner\",\"msg\":\"The answer is 42\"} log_info('The answers are {1:5}') #> {\"time\":\"2024-08-18 23:14:22\",\"level\":\"INFO\",\"ns\":\"global\",\"ans\":\"global\",\"topenv\":\"R_GlobalEnv\",\"fn\":\"eval\",\"node\":\"fv-az1393-167\",\"arch\":\"x86_64\",\"os_name\":\"Linux\",\"os_release\":\"6.5.0-1025-azure\",\"os_version\":\"#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024\",\"pid\":8156,\"user\":\"runner\",\"msg\":\"The answers are 1\"} #> {\"time\":\"2024-08-18 23:14:22\",\"level\":\"INFO\",\"ns\":\"global\",\"ans\":\"global\",\"topenv\":\"R_GlobalEnv\",\"fn\":\"eval\",\"node\":\"fv-az1393-167\",\"arch\":\"x86_64\",\"os_name\":\"Linux\",\"os_release\":\"6.5.0-1025-azure\",\"os_version\":\"#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024\",\"pid\":8156,\"user\":\"runner\",\"msg\":\"The answers are 2\"} #> {\"time\":\"2024-08-18 23:14:22\",\"level\":\"INFO\",\"ns\":\"global\",\"ans\":\"global\",\"topenv\":\"R_GlobalEnv\",\"fn\":\"eval\",\"node\":\"fv-az1393-167\",\"arch\":\"x86_64\",\"os_name\":\"Linux\",\"os_release\":\"6.5.0-1025-azure\",\"os_version\":\"#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024\",\"pid\":8156,\"user\":\"runner\",\"msg\":\"The answers are 3\"} #> {\"time\":\"2024-08-18 23:14:22\",\"level\":\"INFO\",\"ns\":\"global\",\"ans\":\"global\",\"topenv\":\"R_GlobalEnv\",\"fn\":\"eval\",\"node\":\"fv-az1393-167\",\"arch\":\"x86_64\",\"os_name\":\"Linux\",\"os_release\":\"6.5.0-1025-azure\",\"os_version\":\"#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024\",\"pid\":8156,\"user\":\"runner\",\"msg\":\"The answers are 4\"} #> {\"time\":\"2024-08-18 23:14:22\",\"level\":\"INFO\",\"ns\":\"global\",\"ans\":\"global\",\"topenv\":\"R_GlobalEnv\",\"fn\":\"eval\",\"node\":\"fv-az1393-167\",\"arch\":\"x86_64\",\"os_name\":\"Linux\",\"os_release\":\"6.5.0-1025-azure\",\"os_version\":\"#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024\",\"pid\":8156,\"user\":\"runner\",\"msg\":\"The answers are 5\"}"},{"path":"https://daroczig.github.io/logger/articles/customize_logger.html","id":"custom-log-record-layout","dir":"Articles","previous_headings":"","what":"Custom log record layout","title":"Customizing the Format and the Destination of a Log Record","text":"define custom format log messages rendered, may write formatter layout function(s) rely function generator functions bundled logger package, ?layout_glue_generator. function returns layout function can define glue-ing together variables describing log request via ?get_logger_meta_variables, easy access (package) namespace, calling function’s name, hostname, user running R process etc. quick example: define custom logger: check ’s logged called global environment: check ’s logged called custom function: check ’s logged called package: suppress messages namespace: Another example making use generator function update layout include Process ID might useful eg forking, see example code chunk still using defined log layout: Note layout_glue_generator functions also adds special attribute resulting formatting function printing layout function console, user can easily interpret ’s used instead just showing actual functions’s body: details , see Writing custom logger extensions vignette.","code":"logger <- layout_glue_generator(format = '{node}/{pid}/{namespace}/{fn} {time} {level}: {msg}') log_layout(logger) log_info('foo') #> fv-az1393-167/8156/global/eval 2024-08-18 23:14:22.359607 INFO: foo f <- function() log_info('foo') f() #> fv-az1393-167/8156/global/f 2024-08-18 23:14:22.424876 INFO: foo devtools::load_all(system.file('demo-packages/logger-tester-package', package = 'logger')) #> ℹ Loading logger.tester logger_tester_function(INFO, 'hi from tester package') #> fv-az1393-167/8156/logger.tester/logger_tester_function 2024-08-18 23:14:22.601749 INFO: hi from tester package 0.0807501375675201 log_threshold(namespace = 'logger.tester') #> Log level: INFO log_threshold(WARN, namespace = 'logger.tester') logger_tester_function(INFO, 'hi from tester package') logger_tester_function(WARN, 'hi from tester package') #> fv-az1393-167/8156/logger.tester/logger_tester_function 2024-08-18 23:14:22.670833 WARN: hi from tester package 0.600760886212811 log_info('I am still working in the global namespace') #> fv-az1393-167/8156/global/eval 2024-08-18 23:14:22.672576 INFO: I am still working in the global namespace f <- function(x) {     log_info('received {length(x)} values')     log_success('with the mean of {mean(x)}')     mean(x) } library(parallel) mclapply(split(runif(100), 1:10), f, mc.cores = 5) #> nevermind/26448/R_GlobalEnv/FUN 2018-12-02 21:54:11 INFO: received 10 values #> nevermind/26448/R_GlobalEnv/FUN 2018-12-02 21:54:11 SUCCESS: with the mean of 0.403173440974206 #> nevermind/26449/R_GlobalEnv/FUN 2018-12-02 21:54:11 INFO: received 10 values #> nevermind/26448/R_GlobalEnv/FUN 2018-12-02 21:54:11 INFO: received 10 values #> nevermind/26449/R_GlobalEnv/FUN 2018-12-02 21:54:11 SUCCESS: with the mean of 0.538581100990996 #> nevermind/26448/R_GlobalEnv/FUN 2018-12-02 21:54:11 SUCCESS: with the mean of 0.485734378430061 #> nevermind/26450/R_GlobalEnv/FUN 2018-12-02 21:54:11 INFO: received 10 values #> nevermind/26449/R_GlobalEnv/FUN 2018-12-02 21:54:11 INFO: received 10 values #> nevermind/26450/R_GlobalEnv/FUN 2018-12-02 21:54:11 SUCCESS: with the mean of 0.580483326432295 #> nevermind/26452/R_GlobalEnv/FUN 2018-12-02 21:54:11 INFO: received 10 values #> nevermind/26449/R_GlobalEnv/FUN 2018-12-02 21:54:11 SUCCESS: with the mean of 0.461282140854746 #> nevermind/26450/R_GlobalEnv/FUN 2018-12-02 21:54:11 INFO: received 10 values #> nevermind/26451/R_GlobalEnv/FUN 2018-12-02 21:54:11 INFO: received 10 values #> nevermind/26450/R_GlobalEnv/FUN 2018-12-02 21:54:11 SUCCESS: with the mean of 0.465152264293283 #> nevermind/26452/R_GlobalEnv/FUN 2018-12-02 21:54:11 SUCCESS: with the mean of 0.618332817289047 #> nevermind/26451/R_GlobalEnv/FUN 2018-12-02 21:54:11 SUCCESS: with the mean of 0.493527933699079 #> nevermind/26452/R_GlobalEnv/FUN 2018-12-02 21:54:11 INFO: received 10 values #> nevermind/26452/R_GlobalEnv/FUN 2018-12-02 21:54:11 SUCCESS: with the mean of 0.606248055002652 #> nevermind/26451/R_GlobalEnv/FUN 2018-12-02 21:54:11 INFO: received 10 values #> nevermind/26451/R_GlobalEnv/FUN 2018-12-02 21:54:11 SUCCESS: with the mean of 0.537314630229957 log_layout() #> layout_glue_generator(format = \"{node}/{pid}/{namespace}/{fn} {time} {level}: {msg}\") ## reset layout log_layout(layout_simple)"},{"path":"https://daroczig.github.io/logger/articles/customize_logger.html","id":"delivering-log-records-to-their-destination","dir":"Articles","previous_headings":"","what":"Delivering log records to their destination","title":"Customizing the Format and the Destination of a Log Record","text":"default, logger write console stdout via ?appender_console function: write logfile instead, use ?appender_file generator function, returns function can used namespace: ’s similar generator function returns appender function delivering log messages Slack channels: may find ?appender_tee also useful, writes log messages stdout file. many appender functions bundled logger well, eg writing Syslog, Telegram, Pushbullet, database table Amazon Kinesis stream – even asynchronously via appender_async – see Simple Benchmarks Performance details.","code":"log_appender() #> appender_stdout t <- tempfile() log_appender(appender_file(t)) log_info('where is this message going?') log_appender() #> appender_file(file = t) readLines(t) #> [1] \"INFO [2024-08-18 23:14:22] where is this message going?\" unlink(t) ## load Slack configuration, API token etc from a (hopefully encrypted) yaml file or similar slack_config <- config::config(...) ## redirect log messages to Slack log_appender(appender_slack(     channel   = '#gergely-test',     username  = 'logger',     api_token = slack_config$token ), namespace = 'slack') log_info('Excited about sending logs to Slack!') #> INFO [2018-11-28 00:21:13] Excited about sending logs to Slack! log_info('Hi there from logger@R!', namespace = 'slack') ## reset appender log_appender(appender_console)"},{"path":"https://daroczig.github.io/logger/articles/customize_logger.html","id":"stacking-loggers","dir":"Articles","previous_headings":"","what":"Stacking loggers","title":"Customizing the Format and the Destination of a Log Record","text":"Note ?appender_tee functionality can implemented stacking loggers well, eg setting two loggers global namespace: ?appender_console ?appender_file. advantage approach can set different log level thresholds logger, example:","code":"log_threshold() #> Log level: INFO  ## create a new logger with index 2 log_threshold(TRACE, index = 2)  ## note that the original logger still have the same log level threshold log_threshold() #> Log level: INFO log_threshold(index = 2) #> Log level: TRACE  ## update the appender of the new logger t <- tempfile() log_appender(appender_file(t), index = 2)  ## test both loggers log_info('info msg') log_debug('info msg')  readLines(t) #> [1] \"INFO [2024-08-18 23:14:23] info msg\"  #> [2] \"DEBUG [2024-08-18 23:14:23] info msg\" unlink(t)"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"futile-logger","dir":"Articles","previous_headings":"","what":"futile.logger","title":"Migration Guide","text":"logger package heavily inspired futile.logger using many years, also opened multiple pull requests extend futile.logger decided revamp ideas new R package – still many common things futile.logger logger.","code":""},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"initialize","dir":"Articles","previous_headings":"futile.logger","what":"Initialize","title":"Migration Guide","text":"packages comes default log engine / config, ’s enough load packages ready used right away: futile.logger logger","code":"library(futile.logger) #>  #> Attaching package: 'futile.logger' #> The following objects are masked from 'package:logger': #>  #>     DEBUG, ERROR, FATAL, INFO, TRACE, WARN library(logger)"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"logging-functions","dir":"Articles","previous_headings":"futile.logger","what":"Logging functions","title":"Migration Guide","text":"important change function names snake_case logger, futile.logger uses dot.separated expressions, futile.logger prefixes function names flog logger uses log : futile.logger logger can see , default layout messages exactly .","code":"flog.info('hi there') #> INFO [2024-08-18 23:14:27] hi there flog.warn('watch out') #> WARN [2024-08-18 23:14:27] watch out log_info('hi there') #> INFO [2024-08-18 23:14:27] hi there log_warn('watch out') #> WARN [2024-08-18 23:14:27] watch out"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"log-levels","dir":"Articles","previous_headings":"futile.logger","what":"Log levels","title":"Migration Guide","text":"Regarding log levels, futile.logger bundles default log4j levels (TRACE, DEBUG, INFO, WARN, ERROR FATAL) extended SUCCESS logger sometimes ’s worth logging higher INFO level something succeeded.","code":""},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"log-record-layout","dir":"Articles","previous_headings":"futile.logger","what":"Log record layout","title":"Migration Guide","text":"Changing layouts easy package, simply pass layout function: futile.logger logger can see, logger provided bit information log request compared futile.logger, ’s easy change list fields used JSON – see ?get_logger_meta_variables complete list variable names passed ?layout_json. logger also ships lot layouts, eg ?layout_glue_colors roll via ?layout_glue_generator factory function.","code":"flog.layout(layout.json) #> NULL flog.info('hi again') #> {\"level\":\"INFO\",\"timestamp\":\"2024-08-18 23:14:27 +0000\",\"message\":\"hi again\",\"func\":\"base::tryCatch\"} log_layout(layout_json())  log_info('hi again') #> {\"time\":\"2024-08-18 23:14:27\",\"level\":\"INFO\",\"ns\":\"global\",\"ans\":\"global\",\"topenv\":\"R_GlobalEnv\",\"fn\":\"eval\",\"node\":\"fv-az1393-167\",\"arch\":\"x86_64\",\"os_name\":\"Linux\",\"os_release\":\"6.5.0-1025-azure\",\"os_version\":\"#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024\",\"pid\":8297,\"user\":\"runner\",\"msg\":\"hi again\"}"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"log-message-formatting","dir":"Articles","previous_headings":"futile.logger","what":"Log message formatting","title":"Migration Guide","text":"default, futile.logger uses sprintf formatter, logger passes objects logged glue: futile.logger logger ’s easy change default formatter packages: use flog.layout handles well futile.logger, formatter separated layout function logger, check ?log_formatter instead. logger ships bit formatter functions, eg default ?formatter_glue ?formatter_glue_or_sprintf tries combine best words.","code":"flog.info('hi') #> INFO [2024-08-18 23:14:27] hi flog.info('hi %s', 84/2) #> INFO [2024-08-18 23:14:27] hi 42 flog.info(paste('hi', 84/2)) #> INFO [2024-08-18 23:14:27] hi 42 flog.info(glue::glue('hi {84/2}')) #> INFO [2024-08-18 23:14:27] hi 42 log_info('hi') #> INFO [2024-08-18 23:14:27] hi log_info('hi {84/2}') #> INFO [2024-08-18 23:14:27] hi 42 log_formatter(formatter_sprintf) log_info('hi %s', 84/2) #> INFO [2024-08-18 23:14:27] hi 42 log_formatter(formatter_paste) log_info('hi', 84/2) #> INFO [2024-08-18 23:14:27] hi 42"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"log-record-destination","dir":"Articles","previous_headings":"futile.logger","what":"Log record destination","title":"Migration Guide","text":"Setting destination log records works similarly packages, although logger packages bundles lot options: logging logger","code":"t <- tempfile() flog.appender(appender.file(t)) #> NULL flog.appender(appender.tee(t)) #> NULL t <- tempfile() log_appender(appender_file(t)) log_appender(appender_tee(t))"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"hierarchical-logging-and-performance","dir":"Articles","previous_headings":"futile.logger","what":"Hierarchical logging and performance","title":"Migration Guide","text":"packages support using different logging namespaces stacking loggers within namespace. Performance-wise, ’s logger seems faster futile.logger, details, check Simple Benchmarks Performance vignette.","code":""},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"using-logger-as-a-drop-in-replacement-of-futile-logger","dir":"Articles","previous_headings":"futile.logger","what":"Using logger as a drop-in-replacement of futile.logger","title":"Migration Guide","text":"logger hard requirements, ’s lightweight alternative futile.logger. Although function names bit different, message formatter also differs, simple tweaks, logger can become almost perfect drop--replacement futile.logger:","code":"library(logger) log_formatter(formatter_sprintf) flog.trace <- log_trace flog.debug <- log_debug flog.info <- log_info flog.warn <- log_warn flog.error <- log_error  flog.info('Hello from logger in a futile.logger theme ...') flog.warn('... where the default log message formatter is %s', 'sprintf')"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"logging","dir":"Articles","previous_headings":"","what":"logging","title":"Migration Guide","text":"logging package behaves similarly Python logging module thus pretty Pythonic, logger tries accommodate native R users’ expectations – minor nuances usage two packages.","code":""},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"initialize-1","dir":"Articles","previous_headings":"logging","what":"Initialize","title":"Migration Guide","text":"logging, initialize logger first via addHandler simply calling basicConfig, required logger already comes default log config: logging logger","code":"library(logging) basicConfig() library(logger)"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"logging-functions-1","dir":"Articles","previous_headings":"logging","what":"Logging functions","title":"Migration Guide","text":"initializing logging engine, actual logging works similarly two packages – bit different function names: although logging uses mostly camelCase function names (eg basicConfig), logging functions lowercase without separator, loginfo logwarn logger uses snake_case function names, log_info log_warn logging logger can see , default layout log messages somewhat different: logging starts timestamp followed log level, optional namespace message separated colons logger starts log level, followed timestamp brackets message","code":"loginfo('hi there') #> 2024-08-18 23:14:28.333796 INFO::hi there logwarn('watch out') #> 2024-08-18 23:14:28.341297 WARNING::watch out log_info('hi there') log_warn('watch out')"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"log-levels-1","dir":"Articles","previous_headings":"logging","what":"Log levels","title":"Migration Guide","text":"available log levels logging, check ?loglevels, ?log_levels logger: logging logger","code":"str(as.list(loglevels)) #> List of 11 #>  $ NOTSET  : num 0 #>  $ FINEST  : num 1 #>  $ FINER   : num 4 #>  $ FINE    : num 7 #>  $ DEBUG   : num 10 #>  $ INFO    : num 20 #>  $ WARNING : num 30 #>  $ WARN    : num 30 #>  $ ERROR   : num 40 #>  $ CRITICAL: num 50 #>  $ FATAL   : num 50 levels <- mget(ls(     envir = environment(logger), pattern = '^[A-Z]'),     envir = environment(logger)) str(levels[order(-as.numeric(levels))], give.attr = FALSE) #> List of 8 #>  $ TRACE  : 'loglevel' int 600 #>  $ DEBUG  : 'loglevel' int 500 #>  $ INFO   : 'loglevel' int 400 #>  $ SUCCESS: 'loglevel' int 350 #>  $ WARN   : 'loglevel' int 300 #>  $ ERROR  : 'loglevel' int 200 #>  $ FATAL  : 'loglevel' int 100 #>  $ OFF    : 'loglevel' int 0"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"performance","dir":"Articles","previous_headings":"logging","what":"Performance","title":"Migration Guide","text":"Performance-wise, ’s big difference two packages, details, check Simple Benchmarks Performance vignette.","code":""},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"log-record-layout-1","dir":"Articles","previous_headings":"logging","what":"Log record layout","title":"Migration Guide","text":"Getting setting layout log record happen -front packages: logging logger logger provides multiple configurable layouts fit user’s need, eg easily show calling function lof request, pid R process, name machine etc. colorized outputs. See Customizing Format Destination Log Record vignette details.","code":"getLogger()[['handlers']]$basic.stdout$formatter #> function (record)  #> { #>     msg <- trimws(record$msg) #>     text <- paste(record$timestamp, paste(record$levelname, record$logger,  #>         msg, sep = \":\")) #>     return(text) #> } #> <bytecode: 0x55bc02b4df20> #> <environment: namespace:logging> log_layout() #> layout_simple"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"log-message-formatting-1","dir":"Articles","previous_headings":"logging","what":"Log message formatting","title":"Migration Guide","text":"want pass dynamic log messages log engines, can via hard-coded sprintf logging package, can set namespaces basis logger, default using glue: logging logger even better compatibility, ’s also ?formatter_logging relies sprintf first argument string, log call result well log object R expression:","code":"loginfo('hi') #> 2024-08-18 23:14:28.733358 INFO::hi loginfo('hi %s', 84/2) #> 2024-08-18 23:14:28.734528 INFO::hi 42 loginfo(paste('hi', 84/2)) #> 2024-08-18 23:14:28.735544 INFO::hi 42 loginfo(glue::glue('hi {84/2}')) #> 2024-08-18 23:14:28.736704 INFO::hi 42 log_info('hi') log_info('hi {84/2}') log_formatter(formatter_sprintf) log_info('hi %s', 84/2) log_formatter(formatter_paste) log_info('hi', 84/2) log_formatter(formatter_logging) log_info('42') log_info(42) log_info(4+2) log_info('foo %s', 'bar') log_info(12, 1+1, 2 * 2)"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"log-record-destination-1","dir":"Articles","previous_headings":"logging","what":"Log record destination","title":"Migration Guide","text":"Setting destination log records works similarly packages, although logger packages bundles lot options: logging logger","code":"?addHandler ?writeToConsole ?writeToFile ?log_appender ?appender_console ?appender_file ?appender_tee ?appender_slack ?appender_pushbullet"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"hierarchical-logging","dir":"Articles","previous_headings":"logging","what":"Hierarchical logging","title":"Migration Guide","text":"packages support using different logging namespaces stacking loggers within namespace.","code":""},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"using-logger-as-a-drop-in-replacement-of-logging","dir":"Articles","previous_headings":"logging","what":"Using logger as a drop-in-replacement of logging","title":"Migration Guide","text":"logger hard requirements, ’s adequate alternative logging. Although function names bit different, message formatter also differs, simple tweaks, logger can become almost perfect drop--replacement logging – although log levels (eg ) supported:","code":"library(logger) log_formatter(formatter_logging) log_layout(layout_logging) logdebug <- log_debug loginfo <- log_info logwarn <- log_warn logerror <- log_error  loginfo('Hello from logger in a logging theme ...') logwarn('... where the default log message formatter is %s', 'sprintf', namespace = 'foobar')"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"log4r","dir":"Articles","previous_headings":"","what":"log4r","title":"Migration Guide","text":"log4r package provides object-oriented approach logging R, logger object passed log calls – unlike logger package.","code":""},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"initialize-2","dir":"Articles","previous_headings":"log4r","what":"Initialize","title":"Migration Guide","text":"thus ’s important create logging object log4r able log messages, ’s automatically done `logger: log4r logger Please note background, logger concept logger objects, ’s behind scene user specify / reference . hand, wish, can via namespace concept logger – later.","code":"library(log4r) #>  #> Attaching package: 'log4r' #> The following object is masked from 'package:logging': #>  #>     levellog #> The following objects are masked from 'package:logger': #>  #>     as.loglevel, logger #> The following object is masked from 'package:base': #>  #>     debug logger <- create.logger(logfile = stdout(), level = \"INFO\") library(logger)"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"logging-functions-2","dir":"Articles","previous_headings":"log4r","what":"Logging functions","title":"Migration Guide","text":"logger log_ prefix logging functions, log4r lowercase functions names referring log level, takes logging object log message: log4r logger can see default layout messages bit different two packages.","code":"info(logger, 'hi there') #> INFO  [2024-08-18 23:14:29] hi there warn(logger, 'watch out') #> WARN  [2024-08-18 23:14:29] watch out log_info('hi there') log_warn('watch out')"},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"log-levels-2","dir":"Articles","previous_headings":"log4r","what":"Log levels","title":"Migration Guide","text":"packages based log4j, log4r provides DEBUG, INFO, WARN, ERROR FATAL, logger also adds TRACE SUCCESS top . change log level threshold, use level function logging object log4r, ’s log_level logger.","code":""},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"log-record-layout-and-formatter-functions","dir":"Articles","previous_headings":"log4r","what":"Log record layout and formatter functions","title":"Migration Guide","text":"log4r provides logformat argument create.logger can used override default formatting, logger provides formatter layout functions flexible log record design.","code":""},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"log-record-destination-2","dir":"Articles","previous_headings":"log4r","what":"Log record destination","title":"Migration Guide","text":"default, log4r logs file can set stoud write console, logger writes console default, logging files via appender_file functions also possible – besides number log record destinations well.","code":""},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"hierarchical-logging-and-performance-1","dir":"Articles","previous_headings":"log4r","what":"Hierarchical logging and performance","title":"Migration Guide","text":"Creating objects log4r way handling multiple log environments, logger handles via namespaces.","code":""},{"path":"https://daroczig.github.io/logger/articles/migration.html","id":"loggit","dir":"Articles","previous_headings":"","what":"loggit","title":"Migration Guide","text":"Sorry, direct replacement loggit – capturing message, warning stop function messages, ’s roadmap provide helper functions used message hooks feed logger.","code":""},{"path":"https://daroczig.github.io/logger/articles/write_custom_extensions.html","id":"custom-log-message-formatter-functions","dir":"Articles","previous_headings":"","what":"Custom log message formatter functions","title":"Writing Custom Logger Extensions","text":"log message formatter function able take number R objects convert character vector safe pass layout function. transformer function can simple calling paste, glue sprintf something complex well, eg looking user attributes user id mentioned log record etc. writing custom formatter function, also accept original logging function call .logcall, parent call .topcall log request’s environment .topenv, can used find relevant variables formatter. writing function generator function returning log message formatter function, please keep actual call resulting formatter function (eg match.call() generator function quoted function call) recorded generator attribute function ?log_formatter can pretty-print instead unnamed function body. See formatters.R file examples.","code":""},{"path":"https://daroczig.github.io/logger/articles/write_custom_extensions.html","id":"custom-log-layout-rendering-functions","dir":"Articles","previous_headings":"","what":"Custom log layout rendering functions","title":"Writing Custom Logger Extensions","text":"layout functions return log record take least two arguments: log level message already formatted string log message formatter function namespace (namespace), calling function (.topcall) environment (.topenv) log request, actual log call (.logcall) automatically collected ?log_level layout rendering function can simple default ?layout_simple: much complex, eg looking hostname machine, public IP address etc logging automatically message log request. easiest option set custom layout calling ?layout_glue_generator comes nice API able access bunch meta-information log request via ?get_logger_meta_variables. example, see Customizing format destination log records vignette. writing function generator function returning log message formatter function, please keep actual call resulting formatter function (eg match.call() generator function quoted function call) recorded generator attribute function ?log_layout can pretty-print instead unnamed function body. See layouts.R file examples.","code":"layout_simple <- function(level, msg, ...) {     paste0(attr(level, 'level'), ' [', format(Sys.time(), \"%Y-%m-%d %H:%M:%S\"), '] ', msg) }"},{"path":"https://daroczig.github.io/logger/articles/write_custom_extensions.html","id":"custom-log-record-appenders","dir":"Articles","previous_headings":"","what":"Custom log record appenders","title":"Writing Custom Logger Extensions","text":"appender functions take log records delivers desired destination. can simple writing console (?appender_console) local file (?appender_file), delivering log record via API request remote service, streaming somewhere sending Slack message (?appender_slack). writing function generator function returning log message formatter function, please keep actual call resulting formatter function (eg match.call() generator function quoted function call) recorded generator attribute function ?log_appender can pretty-print instead unnamed function body. See appenders.R file examples. example custom appender delivering log messages database table:","code":"## the dbr package provides and easy and secure way of connecting to databased from R ## although if you want to minimize the dependencies, feel free to stick with DBI etc. library(dbr) ## init a persistent connection to the database using a yaml config in the background thanks to dbr ## NOTE that this is optional and a temporarily connection could be also used ##      for higher reliability but lower throughput con <- db_connect('mydb') ## define custom function writing the log message to a table log_appender(function(lines) {     db_append(         df = data.frame(timestamp = Sys.time(), message = lines),         table = 'logs', db = con) })"},{"path":"https://daroczig.github.io/logger/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gergely Daróczi. Author, maintainer. . Funder.","code":""},{"path":"https://daroczig.github.io/logger/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Daróczi G (2024). logger: Lightweight, Modern Flexible Logging Utility. R package version 0.3.0, https://daroczig.github.io/logger/.","code":"@Manual{,   title = {logger: A Lightweight, Modern and Flexible Logging Utility},   author = {Gergely Daróczi},   year = {2024},   note = {R package version 0.3.0},   url = {https://daroczig.github.io/logger/}, }"},{"path":"https://daroczig.github.io/logger/index.html","id":"logger","dir":"","previous_headings":"","what":"A Lightweight, Modern and Flexible Logging Utility","title":"A Lightweight, Modern and Flexible Logging Utility","text":"lightweight, modern flexibly logging utility R – heavily inspired futile.logger R package logging Python module.","code":""},{"path":"https://daroczig.github.io/logger/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Lightweight, Modern and Flexible Logging Utility","text":"recent, development version logger can also installed GitHub:","code":"install.packages('logger') remotes::install_github('daroczig/logger')"},{"path":"https://daroczig.github.io/logger/index.html","id":"quick-example","dir":"","previous_headings":"","what":"Quick example","title":"A Lightweight, Modern and Flexible Logging Utility","text":"Setting log level threshold something low logging various messages ad-hoc programmatic ways: Setting custom log layout render log records colors: simply run related demo:  set custom colors layout, eg using custom colors log levels, make grayscale, include calling function R package namespace specific colors etc. details, see related vignettes.","code":"library(logger) log_threshold(DEBUG) log_info('Script starting up...') #> INFO [2018-20-11 22:49:36] Script starting up...  pkgs <- available.packages() log_info('There are {nrow(pkgs)} R packages hosted on CRAN!') #> INFO [2018-20-11 22:49:37] There are 13433 R packages hosted on CRAN!  for (letter in letters) {     lpkgs <- sum(grepl(letter, pkgs[, 'Package'], ignore.case = TRUE))     log_level(if (lpkgs < 5000) TRACE else DEBUG,               '{lpkgs} R packages including the {shQuote(letter)} letter') } #> DEBUG [2018-20-11 22:49:38] 6300 R packages including the 'a' letter #> DEBUG [2018-20-11 22:49:38] 6772 R packages including the 'e' letter #> DEBUG [2018-20-11 22:49:38] 5412 R packages including the 'i' letter #> DEBUG [2018-20-11 22:49:38] 7014 R packages including the 'r' letter #> DEBUG [2018-20-11 22:49:38] 6402 R packages including the 's' letter #> DEBUG [2018-20-11 22:49:38] 5864 R packages including the 't' letter  log_warn('There might be many, like {1:2} or more warnings!!!') #> WARN [2018-20-11 22:49:39] There might be many, like 1 or more warnings!!! #> WARN [2018-20-11 22:49:39] There might be many, like 2 or more warnings!!! library(logger) log_layout(layout_glue_colors) log_threshold(TRACE) log_info('Starting the script...') log_debug('This is the second log line') log_trace('Note that the 2nd line is being placed right after the 1st one.') log_success('Doing pretty well so far!') log_warn('But beware, as some errors might come :/') log_error('This is a problem') log_debug('Note that getting an error is usually bad') log_error('This is another problem') log_fatal('The last problem') demo(colors, package = 'logger', echo = FALSE)"},{"path":"https://daroczig.github.io/logger/index.html","id":"why-yet-another-logging-r-package","dir":"","previous_headings":"","what":"Why yet another logging R package?","title":"A Lightweight, Modern and Flexible Logging Utility","text":"Although multiple pretty good options already hosted CRAN comes logging R, futile.logger: probably popular log4j variant (’m big fan) logging: just like Python’s logging package loggit: capture message, warning stop function messages JSON file log4r: log4j-based, object-oriented logger rsyslog: logging syslog ‘POSIX’-compatible operating systems lumberjack: provides special operator log changes data Also many work--progress R packages hosted eg GitHub, https://github.com/smbache/loggr https://github.com/nfultz/tron https://github.com/metrumresearchgroup/logrrr https://github.com/lorenzwalthert/drogger https://github.com/s-fleck/yog /packages actively maintained , /maintainers open new features / patches modular enough extensions prone scoping issues using strange syntax elements, eg dots function names object-oriented approaches familiar R users requires lot typing code repetitions based subjective opinions, decided write n+1th extensible log4j logger fits liking – hopefully well – focus : keep close log4j respect recent function / variable naming conventions general R coding style default, rely glue comes formatting / rendering log messages, keep flexible others prefer sprintf (eg performance reasons) functions support vectorization (eg passing vector logged multiple lines) make easy extend new features (eg custom layouts, message formats output) prepare writing various services, streams etc provide support namespaces, preferably automatically finding creating custom namespace R packages writing log messages, optionally configurable log level threshold, message output formats allow stacking loggers implement logger hierarchy – even within namespace, log call can write TRACE log messages console, pushing ERRORs DataDog eg INFO messages CloudWatch optionally colorize log message based log level make logging fun Welcome Bazaar, happened already use mentioned R packages logging, might find useful Migration Guide.","code":""},{"path":"https://daroczig.github.io/logger/index.html","id":"interested-in-more-details","dir":"","previous_headings":"","what":"Interested in more details?","title":"A Lightweight, Modern and Flexible Logging Utility","text":"Check main documentation site https://daroczig.github.io/logger vignettes topics: Introduction logger Anatomy Log Request Customizing Format Destination Log Record Writing Custom Logger Extensions Migration Guide logging packages Logging R Packages Simple Benchmarks Performance","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_async.html","id":null,"dir":"Reference","previous_headings":"","what":"Delays executing the actual appender function to the future in a background process to avoid blocking the main R session — appender_async","title":"Delays executing the actual appender function to the future in a background process to avoid blocking the main R session — appender_async","text":"Delays executing actual appender function future background process avoid blocking main R session","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_async.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delays executing the actual appender function to the future in a background process to avoid blocking the main R session — appender_async","text":"","code":"appender_async(   appender,   batch = 1,   namespace = \"async_logger\",   init = function() log_info(\"Background process started\") )"},{"path":"https://daroczig.github.io/logger/reference/appender_async.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delays executing the actual appender function to the future in a background process to avoid blocking the main R session — appender_async","text":"appender  log_appender function generator attribute (TODO note required, fn passed ) batch number records process queue namespace logger namespace use logging messages starting background process init optional function run background process useful set environment required logging, eg appender function requires extra packages loaded environment variables set etc","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_async.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delays executing the actual appender function to the future in a background process to avoid blocking the main R session — appender_async","text":"function taking lines argument","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_async.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Delays executing the actual appender function to the future in a background process to avoid blocking the main R session — appender_async","text":"functionality depends txtq callr packages. R session's temp folder used staging files (message queue forms communication parent child processes).","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/appender_async.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delays executing the actual appender function to the future in a background process to avoid blocking the main R session — appender_async","text":"","code":"if (FALSE) { # \\dontrun{ appender_file_slow <- function(file) {   force(file)   function(lines) {     Sys.sleep(1)     cat(lines, sep = '\\n', file = file, append = TRUE)   } }  ## log what's happening in the background log_threshold(TRACE, namespace = 'async_logger') log_appender(appender_console, namespace = 'async_logger')  ## start async appender t <- tempfile() log_info('Logging in the background to {t}') my_appender <- appender_async(appender_file_slow(file = t))  ## use async appender log_appender(my_appender) log_info('Was this slow?') system.time(for (i in 1:25) log_info(i))  readLines(t) Sys.sleep(10) readLines(t)  ## check on the async appender (debugging, you will probably never need this) attr(my_appender, 'async_writer_queue')$count() attr(my_appender, 'async_writer_queue')$log()  attr(my_appender, 'async_writer_process')$get_pid() attr(my_appender, 'async_writer_process')$get_state() attr(my_appender, 'async_writer_process')$poll_process(1) attr(my_appender, 'async_writer_process')$read()  attr(my_appender, 'async_writer_process')$is_alive() attr(my_appender, 'async_writer_process')$read_error() } # }"},{"path":"https://daroczig.github.io/logger/reference/appender_console.html","id":null,"dir":"Reference","previous_headings":"","what":"Append log record to stderr — appender_console","title":"Append log record to stderr — appender_console","text":"Append log record stderr","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_console.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append log record to stderr — appender_console","text":"","code":"appender_console(lines)  appender_stderr(lines)"},{"path":"https://daroczig.github.io/logger/reference/appender_console.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append log record to stderr — appender_console","text":"lines character vector","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/appender_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Append log messages to a file — appender_file","title":"Append log messages to a file — appender_file","text":"Log messages written file basic log rotation: max number lines bytes defined Inf, log file renamed .1 suffix new log file created. renaming happens recursively (eg logfile.1 renamed logfile.2) specified max_files, oldest file (logfile.{max_files-1}) deleted.","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append log messages to a file — appender_file","text":"","code":"appender_file(   file,   append = TRUE,   max_lines = Inf,   max_bytes = Inf,   max_files = 1L )"},{"path":"https://daroczig.github.io/logger/reference/appender_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append log messages to a file — appender_file","text":"file path append boolean passed cat defining file overwritten recent log message instead appending max_lines numeric specifying maximum number lines allowed file rotating max_bytes numeric specifying maximum number bytes allowed file rotating max_files integer specifying maximum number files used rotation","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append log messages to a file — appender_file","text":"function taking lines argument","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/appender_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append log messages to a file — appender_file","text":"","code":"if (FALSE) { # \\dontrun{ ## ########################################################################## ## simple example logging to a file t <- tempfile() log_appender(appender_file(t)) for (i in 1:25) log_info(i) readLines(t)  ## ########################################################################## ## more complex example of logging to file ## rotated after every 3rd line up to max 5 files  ## create a folder storing the log files t <- tempfile(); dir.create(t) f <- file.path(t, 'log')  ## define the file logger with log rotation enabled log_appender(appender_file(f, max_lines = 3, max_files = 5L))  ## log 25 messages for (i in 1:25) log_info(i)  ## see what was logged lapply(list.files(t, full.names = TRUE), function(t) {   cat('\\n##', t, '\\n')   cat(readLines(t), sep = '\\n') })  ## enable internal logging to see what's actually happening in the logrotate steps log_threshold(TRACE, namespace = '.logger') ## run the above commands again } # }"},{"path":"https://daroczig.github.io/logger/reference/appender_kinesis.html","id":null,"dir":"Reference","previous_headings":"","what":"Send log messages to a Amazon Kinesis stream — appender_kinesis","title":"Send log messages to a Amazon Kinesis stream — appender_kinesis","text":"Send log messages Amazon Kinesis stream","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_kinesis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send log messages to a Amazon Kinesis stream — appender_kinesis","text":"","code":"appender_kinesis(stream)"},{"path":"https://daroczig.github.io/logger/reference/appender_kinesis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send log messages to a Amazon Kinesis stream — appender_kinesis","text":"stream name Kinesis stream","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_kinesis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send log messages to a Amazon Kinesis stream — appender_kinesis","text":"function taking lines optional partition_key argument","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_kinesis.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Send log messages to a Amazon Kinesis stream — appender_kinesis","text":"functionality depends botor package.","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/appender_pushbullet.html","id":null,"dir":"Reference","previous_headings":"","what":"Send log messages to Pushbullet — appender_pushbullet","title":"Send log messages to Pushbullet — appender_pushbullet","text":"Send log messages Pushbullet","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_pushbullet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send log messages to Pushbullet — appender_pushbullet","text":"","code":"appender_pushbullet(...)"},{"path":"https://daroczig.github.io/logger/reference/appender_pushbullet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send log messages to Pushbullet — appender_pushbullet","text":"... parameters passed pbPost, recipients apikey, although probably much better set ~/.rpushbullet.json per package docs http://dirk.eddelbuettel.com/code/rpushbullet.html","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_pushbullet.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Send log messages to Pushbullet — appender_pushbullet","text":"functionality depends RPushbullet package.","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/appender_slack.html","id":null,"dir":"Reference","previous_headings":"","what":"Send log messages to a Slack channel — appender_slack","title":"Send log messages to a Slack channel — appender_slack","text":"Send log messages Slack channel","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_slack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send log messages to a Slack channel — appender_slack","text":"","code":"appender_slack(   channel = Sys.getenv(\"SLACK_CHANNEL\"),   username = Sys.getenv(\"SLACK_USERNAME\"),   icon_emoji = Sys.getenv(\"SLACK_ICON_EMOJI\"),   api_token = Sys.getenv(\"SLACK_API_TOKEN\"),   preformatted = TRUE )"},{"path":"https://daroczig.github.io/logger/reference/appender_slack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send log messages to a Slack channel — appender_slack","text":"channel Slack channel name hashtag prefix public channel prefix private channels username Slack (bot) username icon_emoji optional override bot icon api_token Slack API token preformatted use code tags around message?","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_slack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send log messages to a Slack channel — appender_slack","text":"function taking lines argument","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_slack.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Send log messages to a Slack channel — appender_slack","text":"functionality depends slackr package.","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/appender_stdout.html","id":null,"dir":"Reference","previous_headings":"","what":"Append log record to stdout — appender_stdout","title":"Append log record to stdout — appender_stdout","text":"Append log record stdout","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_stdout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append log record to stdout — appender_stdout","text":"","code":"appender_stdout(lines)"},{"path":"https://daroczig.github.io/logger/reference/appender_stdout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append log record to stdout — appender_stdout","text":"lines character vector","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/appender_syslog.html","id":null,"dir":"Reference","previous_headings":"","what":"Send log messages to the POSIX system log — appender_syslog","title":"Send log messages to the POSIX system log — appender_syslog","text":"Send log messages POSIX system log","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_syslog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send log messages to the POSIX system log — appender_syslog","text":"","code":"appender_syslog(identifier, ...)"},{"path":"https://daroczig.github.io/logger/reference/appender_syslog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send log messages to the POSIX system log — appender_syslog","text":"identifier string identifying process. ... arguments passed open_syslog.","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_syslog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send log messages to the POSIX system log — appender_syslog","text":"function taking lines argument","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_syslog.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Send log messages to the POSIX system log — appender_syslog","text":"functionality depends rsyslog package.","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/appender_syslog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send log messages to the POSIX system log — appender_syslog","text":"","code":"if (FALSE) { # \\dontrun{ if (requireNamespace(\"rsyslog\", quietly = TRUE)) {   log_appender(appender_syslog(\"test\"))   log_info(\"Test message.\") } } # }"},{"path":"https://daroczig.github.io/logger/reference/appender_syslognet.html","id":null,"dir":"Reference","previous_headings":"","what":"Send log messages to a network syslog server — appender_syslognet","title":"Send log messages to a network syslog server — appender_syslognet","text":"Send log messages network syslog server","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_syslognet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send log messages to a network syslog server — appender_syslognet","text":"","code":"appender_syslognet(identifier, server, port = 601L)"},{"path":"https://daroczig.github.io/logger/reference/appender_syslognet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send log messages to a network syslog server — appender_syslognet","text":"identifier program/function identification (string). server machine syslog daemon runs (string). port port syslog daemon listens (integer).","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_syslognet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send log messages to a network syslog server — appender_syslognet","text":"function taking lines argument.","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_syslognet.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Send log messages to a network syslog server — appender_syslognet","text":"functionality depends syslognet package.","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_syslognet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send log messages to a network syslog server — appender_syslognet","text":"","code":"if (FALSE) { # \\dontrun{ if (requireNamespace(\"syslognet\", quietly = TRUE)) {   log_appender(appender_syslognet(\"test_app\", 'remoteserver'))   log_info(\"Test message.\") } } # }"},{"path":"https://daroczig.github.io/logger/reference/appender_tee.html","id":null,"dir":"Reference","previous_headings":"","what":"Append log messages to a file and stdout as well — appender_tee","title":"Append log messages to a file and stdout as well — appender_tee","text":"appends log messages console file. rotation options available appender_file.","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_tee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append log messages to a file and stdout as well — appender_tee","text":"","code":"appender_tee(   file,   append = TRUE,   max_lines = Inf,   max_bytes = Inf,   max_files = 1L )"},{"path":"https://daroczig.github.io/logger/reference/appender_tee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append log messages to a file and stdout as well — appender_tee","text":"file path append boolean passed cat defining file overwritten recent log message instead appending max_lines numeric specifying maximum number lines allowed file rotating max_bytes numeric specifying maximum number bytes allowed file rotating max_files integer specifying maximum number files used rotation","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_tee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append log messages to a file and stdout as well — appender_tee","text":"function taking lines argument","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/appender_telegram.html","id":null,"dir":"Reference","previous_headings":"","what":"Send log messages to a Telegram chat — appender_telegram","title":"Send log messages to a Telegram chat — appender_telegram","text":"Send log messages Telegram chat","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_telegram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send log messages to a Telegram chat — appender_telegram","text":"","code":"appender_telegram(   chat_id = Sys.getenv(\"TELEGRAM_CHAT_ID\"),   bot_token = Sys.getenv(\"TELEGRAM_BOT_TOKEN\"),   parse_mode = NULL )"},{"path":"https://daroczig.github.io/logger/reference/appender_telegram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send log messages to a Telegram chat — appender_telegram","text":"chat_id Unique identifier target chat username target channel (format @channelusername) bot_token Telegram Authorization token parse_mode Message parse mode. Allowed values: Markdown HTML","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_telegram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send log messages to a Telegram chat — appender_telegram","text":"function taking lines argument","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_telegram.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Send log messages to a Telegram chat — appender_telegram","text":"functionality depends telegram package.","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/appender_void.html","id":null,"dir":"Reference","previous_headings":"","what":"Dummy appender not delivering the log record to anywhere — appender_void","title":"Dummy appender not delivering the log record to anywhere — appender_void","text":"Dummy appender delivering log record anywhere","code":""},{"path":"https://daroczig.github.io/logger/reference/appender_void.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dummy appender not delivering the log record to anywhere — appender_void","text":"","code":"appender_void(lines)"},{"path":"https://daroczig.github.io/logger/reference/appender_void.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dummy appender not delivering the log record to anywhere — appender_void","text":"lines character vector","code":""},{"path":"https://daroczig.github.io/logger/reference/as.loglevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert R object into a logger log-level — as.loglevel","title":"Convert R object into a logger log-level — as.loglevel","text":"Convert R object logger log-level","code":""},{"path":"https://daroczig.github.io/logger/reference/as.loglevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert R object into a logger log-level — as.loglevel","text":"","code":"as.loglevel(x)"},{"path":"https://daroczig.github.io/logger/reference/as.loglevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert R object into a logger log-level — as.loglevel","text":"x string integer","code":""},{"path":"https://daroczig.github.io/logger/reference/as.loglevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert R object into a logger log-level — as.loglevel","text":"pander log-level, e.g. INFO","code":""},{"path":"https://daroczig.github.io/logger/reference/as.loglevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert R object into a logger log-level — as.loglevel","text":"","code":"as.loglevel(INFO) #> Log level: INFO as.loglevel(400L) #> Log level: INFO as.loglevel(400) #> Log level: INFO"},{"path":"https://daroczig.github.io/logger/reference/catch_base_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Catch the log header — catch_base_log","title":"Catch the log header — catch_base_log","text":"Catch log header","code":""},{"path":"https://daroczig.github.io/logger/reference/catch_base_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catch the log header — catch_base_log","text":"","code":"catch_base_log(   level,   namespace,   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/catch_base_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Catch the log header — catch_base_log","text":"level see log_levels namespace string","code":""},{"path":"https://daroczig.github.io/logger/reference/catch_base_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Catch the log header — catch_base_log","text":"string","code":""},{"path":"https://daroczig.github.io/logger/reference/catch_base_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Catch the log header — catch_base_log","text":"","code":"if (FALSE) { # \\dontrun{ catch_base_log(INFO, NA_character_) logger <- layout_glue_generator(format = '{node}/{pid}/{namespace}/{fn} {time} {level}: {msg}') log_layout(logger) catch_base_log(INFO, NA_character_) fun <- function() catch_base_log(INFO, NA_character_) fun() catch_base_log(INFO, NA_character_, .topcall = call('funLONG')) } # }"},{"path":"https://daroczig.github.io/logger/reference/colorize_by_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Colorize string by the related log level — colorize_by_log_level","title":"Colorize string by the related log level — colorize_by_log_level","text":"Adding color string used terminal output. Supports ANSI standard colors 8 256.","code":""},{"path":"https://daroczig.github.io/logger/reference/colorize_by_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colorize string by the related log level — colorize_by_log_level","text":"","code":"colorize_by_log_level(msg, level)"},{"path":"https://daroczig.github.io/logger/reference/colorize_by_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colorize string by the related log level — colorize_by_log_level","text":"msg string level see log_levels","code":""},{"path":"https://daroczig.github.io/logger/reference/colorize_by_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colorize string by the related log level — colorize_by_log_level","text":"string ANSI escape code","code":""},{"path":"https://daroczig.github.io/logger/reference/colorize_by_log_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colorize string by the related log level — colorize_by_log_level","text":"","code":"cat(colorize_by_log_level('foobar', FATAL), '\\n') #> foobar  cat(colorize_by_log_level('foobar', ERROR), '\\n') #> foobar  cat(colorize_by_log_level('foobar', WARN), '\\n') #> foobar  cat(colorize_by_log_level('foobar', SUCCESS), '\\n') #> foobar  cat(colorize_by_log_level('foobar', INFO), '\\n') #> foobar  cat(colorize_by_log_level('foobar', DEBUG), '\\n') #> foobar  cat(colorize_by_log_level('foobar', TRACE), '\\n') #> foobar"},{"path":"https://daroczig.github.io/logger/reference/delete_logger_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete an index from a logger namespace — delete_logger_index","title":"Delete an index from a logger namespace — delete_logger_index","text":"Delete index logger namespace","code":""},{"path":"https://daroczig.github.io/logger/reference/delete_logger_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete an index from a logger namespace — delete_logger_index","text":"","code":"delete_logger_index(namespace = \"global\", index)"},{"path":"https://daroczig.github.io/logger/reference/delete_logger_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete an index from a logger namespace — delete_logger_index","text":"namespace logger namespace index index logger within namespace","code":""},{"path":"https://daroczig.github.io/logger/reference/deparse_to_one_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Deparse and join all lines into a single line — deparse_to_one_line","title":"Deparse and join all lines into a single line — deparse_to_one_line","text":"Calling deparse joining returned lines single line, separated whitespace, cleaning duplicated whitespace (except excessive whitespace strings single double quotes).","code":""},{"path":"https://daroczig.github.io/logger/reference/deparse_to_one_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deparse and join all lines into a single line — deparse_to_one_line","text":"","code":"deparse_to_one_line(x)"},{"path":"https://daroczig.github.io/logger/reference/deparse_to_one_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deparse and join all lines into a single line — deparse_to_one_line","text":"x object deparse","code":""},{"path":"https://daroczig.github.io/logger/reference/deparse_to_one_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deparse and join all lines into a single line — deparse_to_one_line","text":"string","code":""},{"path":"https://daroczig.github.io/logger/reference/fail_on_missing_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if R package can be loaded and fails loudly otherwise — fail_on_missing_package","title":"Check if R package can be loaded and fails loudly otherwise — fail_on_missing_package","text":"Check R package can loaded fails loudly otherwise","code":""},{"path":"https://daroczig.github.io/logger/reference/fail_on_missing_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if R package can be loaded and fails loudly otherwise — fail_on_missing_package","text":"","code":"fail_on_missing_package(pkg, min_version)"},{"path":"https://daroczig.github.io/logger/reference/fail_on_missing_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if R package can be loaded and fails loudly otherwise — fail_on_missing_package","text":"pkg string min_version optional minimum version needed","code":""},{"path":"https://daroczig.github.io/logger/reference/fail_on_missing_package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if R package can be loaded and fails loudly otherwise — fail_on_missing_package","text":"","code":"if (FALSE) { # \\dontrun{ f <- function() fail_on_missing_package('foobar') f() g <- function() fail_on_missing_package('stats') g() } # }"},{"path":"https://daroczig.github.io/logger/reference/fallback_namespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if provided namespace exists and falls back to global if not — fallback_namespace","title":"Checks if provided namespace exists and falls back to global if not — fallback_namespace","text":"Checks provided namespace exists falls back global ","code":""},{"path":"https://daroczig.github.io/logger/reference/fallback_namespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if provided namespace exists and falls back to global if not — fallback_namespace","text":"","code":"fallback_namespace(namespace)"},{"path":"https://daroczig.github.io/logger/reference/fallback_namespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if provided namespace exists and falls back to global if not — fallback_namespace","text":"namespace string","code":""},{"path":"https://daroczig.github.io/logger/reference/fallback_namespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if provided namespace exists and falls back to global if not — fallback_namespace","text":"string","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_glue.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply glue to convert R objects into a character vector — formatter_glue","title":"Apply glue to convert R objects into a character vector — formatter_glue","text":"Apply glue convert R objects character vector","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_glue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply glue to convert R objects into a character vector — formatter_glue","text":"","code":"formatter_glue(   ...,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/formatter_glue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply glue to convert R objects into a character vector — formatter_glue","text":"... passed glue text interpolation .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_glue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply glue to convert R objects into a character vector — formatter_glue","text":"character vector","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_glue.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Apply glue to convert R objects into a character vector — formatter_glue","text":"Although default log message formatter function, glue installed, formatter_sprintf used fallback.","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/formatter_glue_or_sprintf.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply glue and sprintf — formatter_glue_or_sprintf","title":"Apply glue and sprintf — formatter_glue_or_sprintf","text":"best words: using formatter functions log messages, can useful eg migrating sprintf formatted log messages glue similar.","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_glue_or_sprintf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply glue and sprintf — formatter_glue_or_sprintf","text":"","code":"formatter_glue_or_sprintf(   msg,   ...,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/formatter_glue_or_sprintf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply glue and sprintf — formatter_glue_or_sprintf","text":"msg passed sprintf fmt handled part ... glue ... passed glue text interpolation .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_glue_or_sprintf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply glue and sprintf — formatter_glue_or_sprintf","text":"character vector","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_glue_or_sprintf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply glue and sprintf — formatter_glue_or_sprintf","text":"Note function tries smart passing arguments glue sprintf, might fail edge cases, returns unformatted string.","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/formatter_glue_or_sprintf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply glue and sprintf — formatter_glue_or_sprintf","text":"","code":"if (FALSE) { # \\dontrun{ formatter_glue_or_sprintf(\"{a} + {b} = %s\", a = 2, b = 3, 5) formatter_glue_or_sprintf(\"{pi} * {2} = %s\", pi*2) formatter_glue_or_sprintf(\"{pi} * {2} = {pi*2}\")  formatter_glue_or_sprintf(\"Hi \", \"{c('foo', 'bar')}, did you know that 2*4={2*4}\") formatter_glue_or_sprintf(\"Hi {c('foo', 'bar')}, did you know that 2*4={2*4}\") formatter_glue_or_sprintf(\"Hi {c('foo', 'bar')}, did you know that 2*4=%s\", 2*4) formatter_glue_or_sprintf(\"Hi %s, did you know that 2*4={2*4}\", c('foo', 'bar')) formatter_glue_or_sprintf(\"Hi %s, did you know that 2*4=%s\", c('foo', 'bar'), 2*4) } # }"},{"path":"https://daroczig.github.io/logger/reference/formatter_glue_safe.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply glue_safe to convert R objects into a character vector — formatter_glue_safe","title":"Apply glue_safe to convert R objects into a character vector — formatter_glue_safe","text":"Apply glue_safe convert R objects character vector","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_glue_safe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply glue_safe to convert R objects into a character vector — formatter_glue_safe","text":"","code":"formatter_glue_safe(   ...,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/formatter_glue_safe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply glue_safe to convert R objects into a character vector — formatter_glue_safe","text":"... passed glue_safe text interpolation .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_glue_safe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply glue_safe to convert R objects into a character vector — formatter_glue_safe","text":"character vector","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/formatter_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms all passed R objects into a JSON list — formatter_json","title":"Transforms all passed R objects into a JSON list — formatter_json","text":"Transforms passed R objects JSON list","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms all passed R objects into a JSON list — formatter_json","text":"","code":"formatter_json(   ...,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/formatter_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms all passed R objects into a JSON list — formatter_json","text":"... passed toJSON wrapped list .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms all passed R objects into a JSON list — formatter_json","text":"character vector","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_json.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Transforms all passed R objects into a JSON list — formatter_json","text":"functionality depends jsonlite package.","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/formatter_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforms all passed R objects into a JSON list — formatter_json","text":"","code":"if (FALSE) { # \\dontrun{ log_formatter(formatter_json) log_layout(layout_json_parser()) log_info(everything = 42) log_info(mtcars = mtcars, species = iris$Species) } # }"},{"path":"https://daroczig.github.io/logger/reference/formatter_logging.html","id":null,"dir":"Reference","previous_headings":"","what":"Mimic the default formatter used in the logging package — formatter_logging","title":"Mimic the default formatter used in the logging package — formatter_logging","text":"logging package uses formatter behaves differently input string R object. first argument string, sprintf called – otherwise something like log_eval logs R expression(s) result(s) well.","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mimic the default formatter used in the logging package — formatter_logging","text":"","code":"formatter_logging(   ...,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/formatter_logging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mimic the default formatter used in the logging package — formatter_logging","text":"... string params passed sprintf R expressions evaluated .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_logging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mimic the default formatter used in the logging package — formatter_logging","text":"character vector","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/formatter_logging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mimic the default formatter used in the logging package — formatter_logging","text":"","code":"if (FALSE) { # \\dontrun{ log_formatter(formatter_logging) log_info('42') log_info(42) log_info(4+2) log_info('foo %s', 'bar') log_info('vector %s', 1:3) log_info(12, 1+1, 2 * 2) } # }"},{"path":"https://daroczig.github.io/logger/reference/formatter_pander.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats R objects with pander — formatter_pander","title":"Formats R objects with pander — formatter_pander","text":"Formats R objects pander","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_pander.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats R objects with pander — formatter_pander","text":"","code":"formatter_pander(   x,   ...,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/formatter_pander.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats R objects with pander — formatter_pander","text":"x object logged ... optional parameters passed pander .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_pander.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats R objects with pander — formatter_pander","text":"character vector","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_pander.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Formats R objects with pander — formatter_pander","text":"functionality depends pander package.","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/formatter_pander.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats R objects with pander — formatter_pander","text":"","code":"if (FALSE) { # \\dontrun{ log_formatter(formatter_pander) log_info('42') log_info(42) log_info(4+2) log_info(head(iris)) log_info(head(iris), style = 'simple') log_info(lm(hp ~ wt, mtcars)) } # }"},{"path":"https://daroczig.github.io/logger/reference/formatter_paste.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate R objects into a character vector via paste — formatter_paste","title":"Concatenate R objects into a character vector via paste — formatter_paste","text":"Concatenate R objects character vector via paste","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_paste.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate R objects into a character vector via paste — formatter_paste","text":"","code":"formatter_paste(   ...,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/formatter_paste.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate R objects into a character vector via paste — formatter_paste","text":"... passed paste .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_paste.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate R objects into a character vector via paste — formatter_paste","text":"character vector","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/formatter_sprintf.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply sprintf to convert R objects into a character vector — formatter_sprintf","title":"Apply sprintf to convert R objects into a character vector — formatter_sprintf","text":"Apply sprintf convert R objects character vector","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_sprintf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply sprintf to convert R objects into a character vector — formatter_sprintf","text":"","code":"formatter_sprintf(   fmt,   ...,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/formatter_sprintf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply sprintf to convert R objects into a character vector — formatter_sprintf","text":"fmt passed sprintf ... passed sprintf .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/formatter_sprintf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply sprintf to convert R objects into a character vector — formatter_sprintf","text":"character vector","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/get_logger_definitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the logger definition(s) specified for the current namespace with a fallback to the global namespace — get_logger_definitions","title":"Find the logger definition(s) specified for the current namespace with a fallback to the global namespace — get_logger_definitions","text":"Find logger definition(s) specified current namespace fallback global namespace","code":""},{"path":"https://daroczig.github.io/logger/reference/get_logger_definitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the logger definition(s) specified for the current namespace with a fallback to the global namespace — get_logger_definitions","text":"","code":"get_logger_definitions(namespace = NA_character_, .topenv = parent.frame())"},{"path":"https://daroczig.github.io/logger/reference/get_logger_definitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the logger definition(s) specified for the current namespace with a fallback to the global namespace — get_logger_definitions","text":"namespace override default / auto-picked namespace custom string","code":""},{"path":"https://daroczig.github.io/logger/reference/get_logger_definitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the logger definition(s) specified for the current namespace with a fallback to the global namespace — get_logger_definitions","text":"list function(s)","code":""},{"path":"https://daroczig.github.io/logger/reference/get_logger_meta_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect useful information about the logging environment to be used in log messages — get_logger_meta_variables","title":"Collect useful information about the logging environment to be used in log messages — get_logger_meta_variables","text":"Available variables used log formatter functions, eg layout_glue_generator: levelr: log level R object, eg INFO level: log level string, eg INFO time: current time POSIXct node: name machine known network reported Sys.info arch: machine type, typically CPU architecture os_name: Operating System's name os_release: Operating System's release os_version: Operating System's version user: name real user id reported Sys.info pid: process identification number R session node: name machine known network reported Sys.info r_version: R's major minor version string ns: namespace usually defaults global name holding R package calling logging function ns_pkg_version: version ns package ans: ns defined logger namespace, otherwise fallback namespace (eg usually global) topenv: name top environment parent call called (eg R package name GlobalEnv) call: parent call () calling logging function fn: function's () name calling logging function","code":""},{"path":"https://daroczig.github.io/logger/reference/get_logger_meta_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect useful information about the logging environment to be used in log messages — get_logger_meta_variables","text":"","code":"get_logger_meta_variables(   log_level = NULL,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/get_logger_meta_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect useful information about the logging environment to be used in log messages — get_logger_meta_variables","text":"log_level log level per log_levels namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/get_logger_meta_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect useful information about the logging environment to be used in log messages — get_logger_meta_variables","text":"list","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/grapes-except-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Try to evaluate an expressions and evaluate another expression on exception — %except%","title":"Try to evaluate an expressions and evaluate another expression on exception — %except%","text":"Try evaluate expressions evaluate another expression exception","code":""},{"path":"https://daroczig.github.io/logger/reference/grapes-except-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try to evaluate an expressions and evaluate another expression on exception — %except%","text":"","code":"try %except% except"},{"path":"https://daroczig.github.io/logger/reference/grapes-except-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try to evaluate an expressions and evaluate another expression on exception — %except%","text":"try R expression except fallback R expression evaluated try fails","code":""},{"path":"https://daroczig.github.io/logger/reference/grapes-except-grapes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Try to evaluate an expressions and evaluate another expression on exception — %except%","text":"Suppress log messages except namespace want throw WARN log message exception branch.","code":""},{"path":"https://daroczig.github.io/logger/reference/grapes-except-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Try to evaluate an expressions and evaluate another expression on exception — %except%","text":"","code":"everything %except% 42 #> [1] 42 everything <- '640kb' everything %except% 42 #> [1] \"640kb\"  FunDoesNotExist(1:10) %except% sum(1:10) / length(1:10) #> [1] 5.5 FunDoesNotExist(1:10) %except% (sum(1:10) / length(1:10)) #> [1] 5.5 FunDoesNotExist(1:10) %except% MEAN(1:10) %except% mean(1:10) #> [1] 5.5 FunDoesNotExist(1:10) %except% (MEAN(1:10) %except% mean(1:10)) #> [1] 5.5"},{"path":"https://daroczig.github.io/logger/reference/grayscale_by_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a string with light/dark gray based on the related log level — grayscale_by_log_level","title":"Render a string with light/dark gray based on the related log level — grayscale_by_log_level","text":"Adding color string used terminal output. Supports ANSI standard colors 8 256.","code":""},{"path":"https://daroczig.github.io/logger/reference/grayscale_by_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a string with light/dark gray based on the related log level — grayscale_by_log_level","text":"","code":"grayscale_by_log_level(msg, level)"},{"path":"https://daroczig.github.io/logger/reference/grayscale_by_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a string with light/dark gray based on the related log level — grayscale_by_log_level","text":"msg string level see log_levels","code":""},{"path":"https://daroczig.github.io/logger/reference/grayscale_by_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a string with light/dark gray based on the related log level — grayscale_by_log_level","text":"string ANSI escape code","code":""},{"path":"https://daroczig.github.io/logger/reference/grayscale_by_log_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render a string with light/dark gray based on the related log level — grayscale_by_log_level","text":"","code":"cat(grayscale_by_log_level('foobar', FATAL), '\\n') #> foobar  cat(grayscale_by_log_level('foobar', ERROR), '\\n') #> foobar  cat(grayscale_by_log_level('foobar', WARN), '\\n') #> foobar  cat(grayscale_by_log_level('foobar', SUCCESS), '\\n') #> foobar  cat(grayscale_by_log_level('foobar', INFO), '\\n') #> foobar  cat(grayscale_by_log_level('foobar', DEBUG), '\\n') #> foobar  cat(grayscale_by_log_level('foobar', TRACE), '\\n') #> foobar"},{"path":"https://daroczig.github.io/logger/reference/layout_blank.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a log record by including the raw message without anything added or modified — layout_blank","title":"Format a log record by including the raw message without anything added or modified — layout_blank","text":"Format log record including raw message without anything added modified","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_blank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a log record by including the raw message without anything added or modified — layout_blank","text":"","code":"layout_blank(   level,   msg,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/layout_blank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a log record by including the raw message without anything added or modified — layout_blank","text":"level log level, see log_levels details msg string message namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_blank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a log record by including the raw message without anything added or modified — layout_blank","text":"character vector","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/layout_glue.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a log message with glue — layout_glue","title":"Format a log message with glue — layout_glue","text":"default, layout includes log level log record per log_levels, current timestamp actual log message – can override via calling layout_glue_generator directly. colorized output, see layout_glue_colors.","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_glue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a log message with glue — layout_glue","text":"","code":"layout_glue(   level,   msg,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/layout_glue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a log message with glue — layout_glue","text":"level log level, see log_levels details msg string message namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_glue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a log message with glue — layout_glue","text":"character vector","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/layout_glue_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a log message with glue and ANSI escape codes to add colors — layout_glue_colors","title":"Format a log message with glue and ANSI escape codes to add colors — layout_glue_colors","text":"Format log message glue ANSI escape codes add colors","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_glue_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a log message with glue and ANSI escape codes to add colors — layout_glue_colors","text":"","code":"layout_glue_colors(   level,   msg,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/layout_glue_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a log message with glue and ANSI escape codes to add colors — layout_glue_colors","text":"level log level, see log_levels details msg string message namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_glue_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a log message with glue and ANSI escape codes to add colors — layout_glue_colors","text":"character vector","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_glue_colors.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Format a log message with glue and ANSI escape codes to add colors — layout_glue_colors","text":"functionality depends crayon package.","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/layout_glue_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a log message with glue and ANSI escape codes to add colors — layout_glue_colors","text":"","code":"if (FALSE) { # \\dontrun{ log_layout(layout_glue_colors) log_threshold(TRACE) log_info('Starting the script...') log_debug('This is the second line') log_trace('That is being placed right after the first one.') log_warn('Some errors might come!') log_error('This is a problem') log_debug('Getting an error is usually bad') log_error('This is another problem') log_fatal('The last problem.') } # }"},{"path":"https://daroczig.github.io/logger/reference/layout_glue_generator.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate log layout function using common variables available via glue syntax — layout_glue_generator","title":"Generate log layout function using common variables available via glue syntax — layout_glue_generator","text":"format passed glue access variables: msg: actual log message variables set get_logger_meta_variables","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_glue_generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate log layout function using common variables available via glue syntax — layout_glue_generator","text":"","code":"layout_glue_generator(   format = \"{level} [{format(time, \\\"%Y-%m-%d %H:%M:%S\\\")}] {msg}\" )"},{"path":"https://daroczig.github.io/logger/reference/layout_glue_generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate log layout function using common variables available via glue syntax — layout_glue_generator","text":"format glue-flavored layout message using variables","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_glue_generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate log layout function using common variables available via glue syntax — layout_glue_generator","text":"function taking level msg arguments - keeping original call creating generator generator attribute returned calling log_layout currently used layout","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/layout_glue_generator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate log layout function using common variables available via glue syntax — layout_glue_generator","text":"","code":"if (FALSE) { # \\dontrun{ example_layout <- layout_glue_generator(   format = '{node}/{pid}/{ns}/{ans}/{topenv}/{fn} {time} {level}: {msg}') example_layout(INFO, 'try {runif(1)}')  log_layout(example_layout) log_info('try {runif(1)}') } # }"},{"path":"https://daroczig.github.io/logger/reference/layout_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate log layout function rendering JSON — layout_json","title":"Generate log layout function rendering JSON — layout_json","text":"Generate log layout function rendering JSON","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate log layout function rendering JSON — layout_json","text":"","code":"layout_json(   fields = c(\"time\", \"level\", \"ns\", \"ans\", \"topenv\", \"fn\", \"node\", \"arch\", \"os_name\",     \"os_release\", \"os_version\", \"pid\", \"user\", \"msg\") )"},{"path":"https://daroczig.github.io/logger/reference/layout_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate log layout function rendering JSON — layout_json","text":"fields character vector field names included JSON","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate log layout function rendering JSON — layout_json","text":"character vector","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_json.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate log layout function rendering JSON — layout_json","text":"functionality depends jsonlite package.","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/layout_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate log layout function rendering JSON — layout_json","text":"","code":"if (FALSE) { # \\dontrun{ log_layout(layout_json()) log_info(42) log_info('ok {1:3} + {1:3} = {2*(1:3)}') } # }"},{"path":"https://daroczig.github.io/logger/reference/layout_json_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate log layout function rendering JSON after merging meta fields with parsed list from JSON message — layout_json_parser","title":"Generate log layout function rendering JSON after merging meta fields with parsed list from JSON message — layout_json_parser","text":"Generate log layout function rendering JSON merging meta fields parsed list JSON message","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_json_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate log layout function rendering JSON after merging meta fields with parsed list from JSON message — layout_json_parser","text":"","code":"layout_json_parser(   fields = c(\"time\", \"level\", \"ns\", \"ans\", \"topenv\", \"fn\", \"node\", \"arch\", \"os_name\",     \"os_release\", \"os_version\", \"pid\", \"user\") )"},{"path":"https://daroczig.github.io/logger/reference/layout_json_parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate log layout function rendering JSON after merging meta fields with parsed list from JSON message — layout_json_parser","text":"fields character vector field names included JSON","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_json_parser.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate log layout function rendering JSON after merging meta fields with parsed list from JSON message — layout_json_parser","text":"functionality depends jsonlite package.","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/layout_json_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate log layout function rendering JSON after merging meta fields with parsed list from JSON message — layout_json_parser","text":"","code":"if (FALSE) { # \\dontrun{ log_formatter(formatter_json) log_info(everything = 42) log_layout(layout_json_parser()) log_info(everything = 42) log_layout(layout_json_parser(fields = c('time', 'node'))) log_info(cars = row.names(mtcars), species = unique(iris$Species)) } # }"},{"path":"https://daroczig.github.io/logger/reference/layout_logging.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a log record as the logging package does by default — layout_logging","title":"Format a log record as the logging package does by default — layout_logging","text":"Format log record logging package default","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a log record as the logging package does by default — layout_logging","text":"","code":"layout_logging(   level,   msg,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/layout_logging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a log record as the logging package does by default — layout_logging","text":"level log level, see log_levels details msg string message namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_logging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a log record as the logging package does by default — layout_logging","text":"character vector","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/layout_logging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a log record as the logging package does by default — layout_logging","text":"","code":"if (FALSE) { # \\dontrun{ log_layout(layout_logging) log_info(42) log_info(42, namespace = 'everything')  devtools::load_all(system.file('demo-packages/logger-tester-package', package = 'logger')) logger_tester_function(INFO, 42) } # }"},{"path":"https://daroczig.github.io/logger/reference/layout_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a log record by concatenating the log level, timestamp and message — layout_simple","title":"Format a log record by concatenating the log level, timestamp and message — layout_simple","text":"Format log record concatenating log level, timestamp message","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a log record by concatenating the log level, timestamp and message — layout_simple","text":"","code":"layout_simple(   level,   msg,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/layout_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a log record by concatenating the log level, timestamp and message — layout_simple","text":"level log level, see log_levels details msg string message namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a log record by concatenating the log level, timestamp and message — layout_simple","text":"character vector","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/layout_syslognet.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a log record for syslognet — layout_syslognet","title":"Format a log record for syslognet — layout_syslognet","text":"Format log record syslognet. function converts logger log level log severity level according RFC 5424 \"Syslog Protocol\".","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_syslognet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a log record for syslognet — layout_syslognet","text":"","code":"layout_syslognet(   level,   msg,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/layout_syslognet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a log record for syslognet — layout_syslognet","text":"level log level, see log_levels details msg string message namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/layout_syslognet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a log record for syslognet — layout_syslognet","text":"character vector severity attribute.","code":""},{"path":"https://daroczig.github.io/logger/reference/log_appender.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set log record appender function — log_appender","title":"Get or set log record appender function — log_appender","text":"Get set log record appender function","code":""},{"path":"https://daroczig.github.io/logger/reference/log_appender.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set log record appender function — log_appender","text":"","code":"log_appender(appender = NULL, namespace = \"global\", index = 1)"},{"path":"https://daroczig.github.io/logger/reference/log_appender.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set log record appender function — log_appender","text":"appender function delivering log record destination, eg appender_console, appender_file appender_tee, default NULL namespace logger namespace index index logger within namespace","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/log_appender.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set log record appender function — log_appender","text":"","code":"if (FALSE) { # \\dontrun{ ## change appender to \"tee\" that writes to the console and a file as well t <- tempfile() log_appender(appender_tee(t)) log_info(42) log_info(42:44) readLines(t)  ## poor man's tee by stacking loggers in the namespace t <- tempfile() log_appender(appender_console) log_appender(appender_file(t), index = 2) log_info(42) readLines(t) } # }"},{"path":"https://daroczig.github.io/logger/reference/log_config_setter.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Logging Function — log_config_setter","title":"Base Logging Function — log_config_setter","text":"Base Logging Function","code":""},{"path":"https://daroczig.github.io/logger/reference/log_config_setter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Logging Function — log_config_setter","text":"","code":"log_config_setter(fun_name, arg, namespace, index)"},{"path":"https://daroczig.github.io/logger/reference/log_config_setter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Logging Function — log_config_setter","text":"fun_name string full name log function arg see log_levels namespace logger namespace index index logger within namespace","code":""},{"path":"https://daroczig.github.io/logger/reference/log_config_setter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base Logging Function — log_config_setter","text":"currently set return log function property","code":""},{"path":"https://daroczig.github.io/logger/reference/log_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects a logger call to standard errors — log_errors","title":"Injects a logger call to standard errors — log_errors","text":"function uses trace add log_error function call stop called log error messages logger layout appender.","code":""},{"path":"https://daroczig.github.io/logger/reference/log_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects a logger call to standard errors — log_errors","text":"","code":"log_errors(muffle = getOption(\"logger_muffle_errors\", FALSE))"},{"path":"https://daroczig.github.io/logger/reference/log_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Injects a logger call to standard errors — log_errors","text":"muffle TRUE, error thrown logged","code":""},{"path":"https://daroczig.github.io/logger/reference/log_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Injects a logger call to standard errors — log_errors","text":"","code":"if (FALSE) { # \\dontrun{ log_errors() stop('foobar') } # }"},{"path":"https://daroczig.github.io/logger/reference/log_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate an expression and log results — log_eval","title":"Evaluate an expression and log results — log_eval","text":"Evaluate expression log results","code":""},{"path":"https://daroczig.github.io/logger/reference/log_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate an expression and log results — log_eval","text":"","code":"log_eval(expr, level = TRACE, multiline = FALSE)"},{"path":"https://daroczig.github.io/logger/reference/log_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate an expression and log results — log_eval","text":"expr R expression evaluated logging expression along result level log_levels multiline setting FALSE print expression (enforced one line removing line-breaks ) result single line separated =>, setting TRUE log expression result separate sections reserving line-breaks rendering printed results","code":""},{"path":"https://daroczig.github.io/logger/reference/log_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate an expression and log results — log_eval","text":"","code":"if (FALSE) { # \\dontrun{ log_eval(pi * 2, level = INFO)  ## lowering the log level threshold so that we don't have to set a higher level in log_eval log_threshold(TRACE) log_eval(x <- 4) log_eval(sqrt(x))  ## log_eval can be called in-line as well as returning the return value of the expression x <- log_eval(mean(runif(1e3))) x  ## https://twitter.com/krlmlr/status/1067864829547999232 f <- sqrt g <- mean x <- 1:31 log_eval(f(g(x)), level = INFO) log_eval(y <- f(g(x)), level = INFO)  ## returning a function log_eval(f <- sqrt) log_eval(f)  ## evaluating something returning a wall of \"text\" log_eval(f <- log_eval) log_eval(f <- log_eval, multiline = TRUE)  ## doing something computationally intensive log_eval(system.time(for(i in 1:100) mad(runif(1000))), multiline = TRUE) } # }"},{"path":"https://daroczig.github.io/logger/reference/log_failure.html","id":null,"dir":"Reference","previous_headings":"","what":"Logs the error message to console before failing — log_failure","title":"Logs the error message to console before failing — log_failure","text":"Logs error message console failing","code":""},{"path":"https://daroczig.github.io/logger/reference/log_failure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logs the error message to console before failing — log_failure","text":"","code":"log_failure(expression)"},{"path":"https://daroczig.github.io/logger/reference/log_failure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logs the error message to console before failing — log_failure","text":"expression call","code":""},{"path":"https://daroczig.github.io/logger/reference/log_failure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logs the error message to console before failing — log_failure","text":"","code":"if (FALSE) { # \\dontrun{ log_failure('foobar') log_failure(foobar) } # }"},{"path":"https://daroczig.github.io/logger/reference/log_formatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set log message formatter — log_formatter","title":"Get or set log message formatter — log_formatter","text":"Get set log message formatter","code":""},{"path":"https://daroczig.github.io/logger/reference/log_formatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set log message formatter — log_formatter","text":"","code":"log_formatter(formatter = NULL, namespace = \"global\", index = 1)"},{"path":"https://daroczig.github.io/logger/reference/log_formatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set log message formatter — log_formatter","text":"formatter function defining R objects converted single string, eg formatter_paste, formatter_sprintf, formatter_glue, formatter_glue_or_sprintf, formatter_logging, default NULL namespace logger namespace index index logger within namespace","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/log_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set log record layout — log_layout","title":"Get or set log record layout — log_layout","text":"Get set log record layout","code":""},{"path":"https://daroczig.github.io/logger/reference/log_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set log record layout — log_layout","text":"","code":"log_layout(layout = NULL, namespace = \"global\", index = 1)"},{"path":"https://daroczig.github.io/logger/reference/log_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set log record layout — log_layout","text":"layout function defining structure log record, eg layout_simple, layout_glue layout_glue_colors, layout_json, generator functions layout_glue_generator, default NULL namespace logger namespace index index logger within namespace","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/log_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set log record layout — log_layout","text":"","code":"if (FALSE) { # \\dontrun{ log_layout(layout_json()) log_info(42) } # }"},{"path":"https://daroczig.github.io/logger/reference/log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Log a message with given log level — log_level","title":"Log a message with given log level — log_level","text":"Log message given log level","code":""},{"path":"https://daroczig.github.io/logger/reference/log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log a message with given log level — log_level","text":"","code":"log_level(   level,   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_fatal(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_error(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_warn(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_success(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_info(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_debug(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_trace(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log a message with given log level — log_level","text":"level log level, see log_levels details ... R objects can converted character vector via active message formatter function namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://daroczig.github.io/logger/reference/log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log a message with given log level — log_level","text":"Invisible list logger objects. See logger details format/","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/log_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log a message with given log level — log_level","text":"","code":"if (FALSE) { # \\dontrun{ log_level(INFO, 'hi there') log_info('hi there')  ## output omitted log_debug('hi there')  ## lower threshold and retry log_threshold(TRACE) log_debug('hi there')  ## multiple lines log_info('ok {1:3} + {1:3} = {2*(1:3)}')  log_layout(layout_json()) log_info('ok {1:3} + {1:3} = {2*(1:3)}')  ## note for the JSON output, glue is not automatically applied log_info(glue::glue('ok {1:3} + {1:3} = {2*(1:3)}')) } # }"},{"path":"https://daroczig.github.io/logger/reference/log_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Log levels — log_levels","title":"Log levels — log_levels","text":"standard Apache logj4 log levels plus custom level SUCCESS. full list log levels suggested usage, check Details.","code":""},{"path":"https://daroczig.github.io/logger/reference/log_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log levels — log_levels","text":"","code":"OFF  FATAL  ERROR  WARN  SUCCESS  INFO  DEBUG  TRACE"},{"path":"https://daroczig.github.io/logger/reference/log_levels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log levels — log_levels","text":"List supported log levels: events logged FATAL Severe error prevent application continuing ERROR error application, possibly recoverable WARN event might possible lead error SUCCESS explicit success event INFO level want log INFO event informational purposes DEBUG general debugging event TRACE fine-grained debug message, typically capturing flow application.","code":""},{"path":"https://daroczig.github.io/logger/reference/log_levels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Log levels — log_levels","text":"https://logging.apache.org/log4j/2.x/javadoc/log4j-api/org/apache/logging/log4j/Level.html, https://logging.apache.org/log4j/2.x/manual/customloglevels.html","code":""},{"path":"https://daroczig.github.io/logger/reference/log_messages.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects a logger call to standard messages — log_messages","title":"Injects a logger call to standard messages — log_messages","text":"function uses trace add log_info function call message called log informative messages logger layout appender.","code":""},{"path":"https://daroczig.github.io/logger/reference/log_messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects a logger call to standard messages — log_messages","text":"","code":"log_messages()"},{"path":"https://daroczig.github.io/logger/reference/log_messages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Injects a logger call to standard messages — log_messages","text":"","code":"if (FALSE) { # \\dontrun{ log_messages() message('hi there') } # }"},{"path":"https://daroczig.github.io/logger/reference/log_namespaces.html","id":null,"dir":"Reference","previous_headings":"","what":"Looks up logger namespaces — log_namespaces","title":"Looks up logger namespaces — log_namespaces","text":"Looks logger namespaces","code":""},{"path":"https://daroczig.github.io/logger/reference/log_namespaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Looks up logger namespaces — log_namespaces","text":"","code":"log_namespaces()"},{"path":"https://daroczig.github.io/logger/reference/log_namespaces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Looks up logger namespaces — log_namespaces","text":"character vector namespace names","code":""},{"path":"https://daroczig.github.io/logger/reference/log_separator.html","id":null,"dir":"Reference","previous_headings":"","what":"Logs a long line to stand out from the console — log_separator","title":"Logs a long line to stand out from the console — log_separator","text":"Logs long line stand console","code":""},{"path":"https://daroczig.github.io/logger/reference/log_separator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logs a long line to stand out from the console — log_separator","text":"","code":"log_separator(   level = INFO,   namespace = NA_character_,   separator = \"=\",   width = 80,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://daroczig.github.io/logger/reference/log_separator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logs a long line to stand out from the console — log_separator","text":"level log level, see log_levels details namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. separator character used separator width max width message – longer text wrapped multiple lines .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/log_separator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logs a long line to stand out from the console — log_separator","text":"","code":"log_separator() log_separator(ERROR, separator = '!', width = 60) log_separator(ERROR, separator = '!', width = 100) logger <- layout_glue_generator(format = '{node}/{pid}/{namespace}/{fn} {time} {level}: {msg}') log_layout(logger) log_separator(ERROR, separator = '!', width = 100) log_layout(layout_blank) log_separator(ERROR, separator = '!', width = 80)"},{"path":"https://daroczig.github.io/logger/reference/log_shiny_input_changes.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto logging input changes in Shiny app — log_shiny_input_changes","title":"Auto logging input changes in Shiny app — log_shiny_input_changes","text":"called server section Shiny app.","code":""},{"path":"https://daroczig.github.io/logger/reference/log_shiny_input_changes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto logging input changes in Shiny app — log_shiny_input_changes","text":"","code":"log_shiny_input_changes(   input,   level = INFO,   namespace = NA_character_,   excluded_inputs = character() )"},{"path":"https://daroczig.github.io/logger/reference/log_shiny_input_changes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto logging input changes in Shiny app — log_shiny_input_changes","text":"input passed Shiny's server level log level namespace name namespace excluded_inputs character vector input names exclude logging","code":""},{"path":"https://daroczig.github.io/logger/reference/log_shiny_input_changes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto logging input changes in Shiny app — log_shiny_input_changes","text":"","code":"if (FALSE) { # \\dontrun{ library(shiny)  ui <- bootstrapPage(     numericInput('mean', 'mean', 0),     numericInput('sd', 'sd', 1),     textInput('title', 'title', 'title'),     textInput('foo', 'This is not used at all, still gets logged', 'foo'),     passwordInput('password', 'Password not to be logged', 'secret'),     plotOutput('plot') )  server <- function(input, output) {      logger::log_shiny_input_changes(input, excluded_inputs = 'password')      output$plot <- renderPlot({         hist(rnorm(1e3, input$mean, input$sd), main = input$title)     })  }  shinyApp(ui = ui, server = server) } # }"},{"path":"https://daroczig.github.io/logger/reference/log_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set log level threshold — log_threshold","title":"Get or set log level threshold — log_threshold","text":"Get set log level threshold","code":""},{"path":"https://daroczig.github.io/logger/reference/log_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set log level threshold — log_threshold","text":"","code":"log_threshold(level = NULL, namespace = \"global\", index = 1)"},{"path":"https://daroczig.github.io/logger/reference/log_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set log level threshold — log_threshold","text":"level see log_levels namespace logger namespace index index logger within namespace","code":""},{"path":"https://daroczig.github.io/logger/reference/log_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set log level threshold — log_threshold","text":"currently set log level threshold","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/log_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set log level threshold — log_threshold","text":"","code":"if (FALSE) { # \\dontrun{ ## check the currently set log level threshold log_threshold()  ## change the log level threshold to WARN log_threshold(WARN) log_info(1) log_warn(2)  ## add another logger with a lower log level threshold and check the number of logged messages log_threshold(INFO, index = 2) log_info(1) log_warn(2)  ## set the log level threshold in all namespaces to ERROR log_threshold(ERROR, namespace =  log_namespaces()) } # }"},{"path":"https://daroczig.github.io/logger/reference/log_tictoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Tic-toc logging — log_tictoc","title":"Tic-toc logging — log_tictoc","text":"Tic-toc logging","code":""},{"path":"https://daroczig.github.io/logger/reference/log_tictoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tic-toc logging — log_tictoc","text":"","code":"log_tictoc(..., level = INFO, namespace = NA_character_)"},{"path":"https://daroczig.github.io/logger/reference/log_tictoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tic-toc logging — log_tictoc","text":"... passed log_level level see log_levels namespace x","code":""},{"path":"https://daroczig.github.io/logger/reference/log_tictoc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tic-toc logging — log_tictoc","text":"Thanks Neal Fultz idea original implementation!","code":""},{"path":"https://daroczig.github.io/logger/reference/log_tictoc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tic-toc logging — log_tictoc","text":"","code":"if (FALSE) { # \\dontrun{ log_tictoc('warming up') Sys.sleep(0.1) log_tictoc('running') Sys.sleep(0.1) log_tictoc('running') Sys.sleep(runif(1)) log_tictoc('and running') } # }"},{"path":"https://daroczig.github.io/logger/reference/log_warnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects a logger call to standard warnings — log_warnings","title":"Injects a logger call to standard warnings — log_warnings","text":"function uses trace add log_warn function call warning called log warning messages logger layout appender.","code":""},{"path":"https://daroczig.github.io/logger/reference/log_warnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects a logger call to standard warnings — log_warnings","text":"","code":"log_warnings(muffle = getOption(\"logger_muffle_warnings\", FALSE))"},{"path":"https://daroczig.github.io/logger/reference/log_warnings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Injects a logger call to standard warnings — log_warnings","text":"muffle TRUE, warning shown logged","code":""},{"path":"https://daroczig.github.io/logger/reference/log_warnings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Injects a logger call to standard warnings — log_warnings","text":"","code":"if (FALSE) { # \\dontrun{ log_warnings() for (i in 1:5) { Sys.sleep(runif(1)); warning(i) } } # }"},{"path":"https://daroczig.github.io/logger/reference/log_with_separator.html","id":null,"dir":"Reference","previous_headings":"","what":"Logs a message in a very visible way — log_with_separator","title":"Logs a message in a very visible way — log_with_separator","text":"Logs message visible way","code":""},{"path":"https://daroczig.github.io/logger/reference/log_with_separator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logs a message in a very visible way — log_with_separator","text":"","code":"log_with_separator(   ...,   level = INFO,   namespace = NA_character_,   separator = \"=\",   width = 80 )"},{"path":"https://daroczig.github.io/logger/reference/log_with_separator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logs a message in a very visible way — log_with_separator","text":"... R objects can converted character vector via active message formatter function level log level, see log_levels details namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. separator character used separator width max width message – longer text wrapped multiple lines","code":""},{"path":[]},{"path":"https://daroczig.github.io/logger/reference/log_with_separator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logs a message in a very visible way — log_with_separator","text":"","code":"log_with_separator('An important message') log_with_separator('Some critical KPI down!!!', separator = '$') log_with_separator('This message is worth a {1e3} words') log_with_separator(paste(   'A very important message with a bunch of extra words that will',   'eventually wrap into a multi-line message for our quite nice demo :wow:')) log_with_separator(paste(   'A very important message with a bunch of extra words that will',   'eventually wrap into a multi-line message for our quite nice demo :wow:'),   width = 60) log_with_separator('Boo!', level = FATAL) log_layout(layout_blank) log_with_separator('Boo!', level = FATAL) logger <- layout_glue_generator(format = '{node}/{pid}/{namespace}/{fn} {time} {level}: {msg}') log_layout(logger) log_with_separator('Boo!', level = FATAL, width = 120)"},{"path":"https://daroczig.github.io/logger/reference/logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate logging utility — logger","title":"Generate logging utility — logger","text":"logger consists log level threshold, log message formatter function, log record layout formatting function appender function deciding destination log record. details, see package README.md.","code":""},{"path":"https://daroczig.github.io/logger/reference/logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate logging utility — logger","text":"","code":"logger(threshold, formatter, layout, appender)"},{"path":"https://daroczig.github.io/logger/reference/logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate logging utility — logger","text":"threshold omit log messages log_levels formatter function pre-processing message log record wrapped skip_formatter call layout function rendering layout actual log record appender function writing log record","code":""},{"path":"https://daroczig.github.io/logger/reference/logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate logging utility — logger","text":"function taking log level compare set threshold, ... arguments passed formatter function, besides standard namespace, .logcall, .topcall .topenv arguments (see log_level details). function invisibly returns list including original level, namespace, ... transformed list params, log message (calling formatter function) log record (calling layout function), list handlers formatter, layout appender functions.","code":""},{"path":"https://daroczig.github.io/logger/reference/logger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate logging utility — logger","text":"default, general logger definition created loading logger package, uses INFO (per LOGGER_LOG_LEVEL environment variable override) log level threshold layout_simple layout function showing log level, timestamp log message formatter_glue (formatter_sprintf glue installed) default formatter function transforming R objects logged character vector appender_console default log record destination","code":""},{"path":"https://daroczig.github.io/logger/reference/logger.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate logging utility — logger","text":"quite unlikely need call function directly, instead set logger parameters functions log_threshold, log_formatter, log_layout log_appender call log_levels derivatives, log_info directly.","code":""},{"path":"https://daroczig.github.io/logger/reference/logger.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate logging utility — logger","text":"details, see Anatomy Log Request vignette https://daroczig.github.io/logger/articles/anatomy.html.","code":""},{"path":"https://daroczig.github.io/logger/reference/logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate logging utility — logger","text":"","code":"if (FALSE) { # \\dontrun{ do.call(logger, logger:::namespaces$global[[1]])(INFO, 42) do.call(logger, logger:::namespaces$global[[1]])(INFO, '{pi}') x <- 42 do.call(logger, logger:::namespaces$global[[1]])(INFO, '{x}^2 = {x^2}') } # }"},{"path":"https://daroczig.github.io/logger/reference/skip_formatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Skip the formatter function — skip_formatter","title":"Skip the formatter function — skip_formatter","text":"Adds skip_formatter attribute object logger skip calling formatter function(s). useful want preprocess log message custom function instead active formatter function(s). Note message string, skip_formatter input logging function make work.","code":""},{"path":"https://daroczig.github.io/logger/reference/skip_formatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skip the formatter function — skip_formatter","text":"","code":"skip_formatter(message, ...)"},{"path":"https://daroczig.github.io/logger/reference/skip_formatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skip the formatter function — skip_formatter","text":"message character vector directly passed appender function logger ... never set","code":""},{"path":"https://daroczig.github.io/logger/reference/skip_formatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skip the formatter function — skip_formatter","text":"character vector  skip_formatter attribute set TRUE","code":""},{"path":"https://daroczig.github.io/logger/reference/top_env_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the name of the top level environment from which the logger was called — top_env_name","title":"Returns the name of the top level environment from which the logger was called — top_env_name","text":"Returns name top level environment logger called","code":""},{"path":"https://daroczig.github.io/logger/reference/top_env_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the name of the top level environment from which the logger was called — top_env_name","text":"","code":"top_env_name(.topenv = parent.frame())"},{"path":"https://daroczig.github.io/logger/reference/top_env_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the name of the top level environment from which the logger was called — top_env_name","text":".topenv call environment","code":""},{"path":"https://daroczig.github.io/logger/reference/top_env_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the name of the top level environment from which the logger was called — top_env_name","text":"string","code":""},{"path":"https://daroczig.github.io/logger/reference/validate_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Assure valid log level — validate_log_level","title":"Assure valid log level — validate_log_level","text":"Assure valid log level","code":""},{"path":"https://daroczig.github.io/logger/reference/validate_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assure valid log level — validate_log_level","text":"","code":"validate_log_level(level)"},{"path":"https://daroczig.github.io/logger/reference/validate_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assure valid log level — validate_log_level","text":"level log_levels object string representation","code":""},{"path":"https://daroczig.github.io/logger/reference/validate_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assure valid log level — validate_log_level","text":"log_levels object","code":""},{"path":"https://daroczig.github.io/logger/reference/warn_if_globalCallingHandlers_is_not_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn to update R to 4+ — warn_if_globalCallingHandlers_is_not_available","title":"Warn to update R to 4+ — warn_if_globalCallingHandlers_is_not_available","text":"Warn update R 4+","code":""},{"path":"https://daroczig.github.io/logger/reference/warn_if_globalCallingHandlers_is_not_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn to update R to 4+ — warn_if_globalCallingHandlers_is_not_available","text":"","code":"warn_if_globalCallingHandlers_is_not_available()"},{"path":"https://daroczig.github.io/logger/reference/with_log_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate R expression with a temporarily updated log level threshold — with_log_threshold","title":"Evaluate R expression with a temporarily updated log level threshold — with_log_threshold","text":"Evaluate R expression temporarily updated log level threshold","code":""},{"path":"https://daroczig.github.io/logger/reference/with_log_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate R expression with a temporarily updated log level threshold — with_log_threshold","text":"","code":"with_log_threshold(   expression,   threshold = ERROR,   namespace = \"global\",   index = 1 )"},{"path":"https://daroczig.github.io/logger/reference/with_log_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate R expression with a temporarily updated log level threshold — with_log_threshold","text":"expression R command threshold log_levels namespace logger namespace index index logger within namespace","code":""},{"path":"https://daroczig.github.io/logger/reference/with_log_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate R expression with a temporarily updated log level threshold — with_log_threshold","text":"","code":"if (FALSE) { # \\dontrun{ log_threshold(TRACE) log_trace('Logging everything!') x <- with_log_threshold({   log_info('Now we are temporarily suppressing eg INFO messages')   log_warn('WARN')   log_debug('Debug messages are suppressed as well')   log_error('ERROR')   invisible(42) }, threshold = WARN) x log_trace('DONE') } # }"},{"path":"https://daroczig.github.io/logger/news/index.html","id":"logger-030-2024-03-03","dir":"Changelog","previous_headings":"","what":"logger 0.3.0 (2024-03-03)","title":"logger 0.3.0 (2024-03-03)","text":"CRAN release: 2024-03-05 Many unrelated small features, fixes documentation updates collected 2+ years.","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"logger 0.3.0 (2024-03-03)","text":"update log_* functions invisibly return formatted log message record (#26, @r2evans) add namespace argument log_shiny_input_changes (#93, @kpagacz) optionally suppress messages globalCallingHandlers logged (#100, @DanChaltiel) .loglevel helper convert string/number loglevel (requested @tentacles--outer-space) new formatter function: formatter_glue_safe (#126, @terashim) support log level (#138, @pawelru) override default INFO log level via env var (#145, requested sellorm)","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"logger 0.3.0 (2024-03-03)","text":"handle zero-length messages formatter_glue_or_sprintf (#74, @deeenes) generalize log_separator work layout functions (#96, @Polkas) support log levels log_shiny_input_changes (#103, @taekeharkema) fix fn name lookup/reference nested calls (#120, reported @averissimo) force file argument appender_tee (#124, reported @dbontemps) don’t allow stacking logger hooks messages/warnings/errors (reported @jkeuskamp) improve fragile test case Hmisc loaded (#131, @r2evans) pass index, namespace etc log_ functions log_level (#143, @MichaelChirico) refer caller function global message logger hooks (#146, reported @gabesolomon10)","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"logger-022-2021-10-10","dir":"Changelog","previous_headings":"","what":"logger 0.2.2 (2021-10-10)","title":"logger 0.2.2 (2021-10-10)","text":"CRAN release: 2021-10-19 Maintenance release: fix unbalanced code chunk delimiters vignette (yihui/knitr#2057)","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"logger-021-2021-07-06","dir":"Changelog","previous_headings":"","what":"logger 0.2.1 (2021-07-06)","title":"logger 0.2.1 (2021-07-06)","text":"CRAN release: 2021-07-06 Maintenance release: update appender_slack use slackr_msg instead text_slackr","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"logger-020-2021-03-03","dir":"Changelog","previous_headings":"","what":"logger 0.2.0 (2021-03-03)","title":"logger 0.2.0 (2021-03-03)","text":"CRAN release: 2021-03-04","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"logger 0.2.0 (2021-03-03)","text":"appender_console writes stderr default instead stdout (#28)","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"logger 0.2.0 (2021-03-03)","text":"default date format glue layouts (#44, @burgikukac) fn reference loggers Cartesian join log lines message, merge (clean ) fn even large anonymous functions (#20)","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"logger 0.2.0 (2021-03-03)","text":"allow defining log level threshold string (#13, @artemklevtsov) allow updating log level threshold, formatter, layout appender namespaces single call (#50) new argument appender_file optionally truncate appending (#24, @eddelbuettel) new arguments appender_file optionally rotate log files appending (#42) new meta variables logging custom layouts: R version calling package’s version improved performance evaluating arguments log record meet log level threshold (#27, @jozefhajnala) logger now part Mikata Project: https://mikata.dev","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"new-helper-functions-0-2-0","dir":"Changelog","previous_headings":"","what":"New helper functions","title":"logger 0.2.0 (2021-03-03)","text":"%except%: evaluate expression fallback log_separator: logging separator lines (#16) log_tictoc: tic-toc logging (#16, @nfultz) log_failure: log error failing (#19, @amy17519) log_messages, log_warnings, log_errors: optionally auto-log messages, warnings errors using globalCallingHandlers R 4.0.0 , injecting logger calls message, warnings stop R 4.0.0 log_shiny_input_changes: auto-log input changes Shiny apps (#25)","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"new-formatter-functions-0-2-0","dir":"Changelog","previous_headings":"","what":"New formatter functions","title":"logger 0.2.0 (2021-03-03)","text":"layout_pander: transform R objects markdown logging (#22)","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"new-layout-functions-0-2-0","dir":"Changelog","previous_headings":"","what":"New layout functions","title":"logger 0.2.0 (2021-03-03)","text":"layout_blank: blank log messages without modification layout_json_parser: render layout JSON blob merging requested meta fields","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"new-appender-functions-0-2-0","dir":"Changelog","previous_headings":"","what":"New appender functions","title":"logger 0.2.0 (2021-03-03)","text":"appender_telegram: deliver log records Telegram (#14, @artemklevtsov) appender_syslog: deliver log records syslog (#30, @atheriel) appender_kinesis: deliver log records Amazon Kinesis (#35) appender_async: wrapper function appender functions deliver log records background process asynchronously without blocking master process (#35)","code":""},{"path":"https://daroczig.github.io/logger/news/index.html","id":"logger-01-2018-12-20","dir":"Changelog","previous_headings":"","what":"logger 0.1 (2018-12-20)","title":"logger 0.1 (2018-12-20)","text":"CRAN release: 2019-01-02 Initial CRAN release collecting feedback month Twitter https://twitter.com/daroczig/status/1067461632677330944: finalized design log request defined log level threshold, formatter function preparing log message, layout function rendering actual log records appender function delivering log destination detailed documentation 7 vignettes lot examples, even benchmarks ~75% code coverage unit tests 5 formatter functions mostly using paste, sprintf glue 6 layout functions convenient wrappers let users define custom layouts via glue JSON, including colorized output 5 appender functions delivering log records console, files, Pushbullet Slack helper function evaluate expressions auto-logging expression result helper function temporarily update log level threshold helper function skip running formatter function log message mostly backward compatibly logging futile.logger packages","code":""}]
